<?xml version="1.0" encoding="UTF-8"?>
<c:model 
    xmlns:c="urn:webdetails/com/2012" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="urn:webdetails/com/2012 ../schema/com_2012.xsd"
    xmlns="http://www.w3.org/1999/xhtml">
    
	<!--
	TODO
	
	dataOptions
	 -->
    
    <c:complexType name="ChartCommonOptions" space="pvc.options.charts" abstract="true">
    
        <c:documentation>
            The common options documentation class of all charts.
        </c:documentation>
        
        <!-- Panels -->
        <c:property name="title" type="string pvc.options.panels.ChartTitlePanelOptions" category="Panels">
            <c:documentation>
                The title panel of the root chart.
                
                When a value of type <tt>string</tt> is specified, 
                it is the title text.
            </c:documentation>
        </c:property>
        
        <c:property name="smallTitle" type="pvc.options.panels.ChartTitlePanelOptions" category="Panels">
            <c:documentation>
                The title panel of the <i>small</i> chart.
                
                The text of the title of small charts is the 
                compound label of the data bound to the <tt>multiChart</tt> visual role.
            </c:documentation>
        </c:property>
        
        <c:property name="legend" type="boolean pvc.options.panels.LegendPanelOptions" category="Panels">
            <c:documentation>
                The legend panel of the root chart.
                
                When a value of type <tt>boolean</tt> is specified,
                it indicates the visibility of the legend.
                The default is <tt>false</tt>.
            </c:documentation>
        </c:property>
        
        <!-- Roles -->
        <c:property name="visualRoles" type="pvc.options.roles.ChartCommonVisualRoles" category="Data Binding">
            <c:documentation>
                The options of visual roles that are common to all chart types.
            </c:documentation>
        </c:property>
        
        <!-- Data -->
        <!-- dataOptions: undefined -->
        
        <c:property name="canvas" type="string object" category="General">
            <c:documentation>
                The identifier of the HTML element, 
                or the element itself,
                where the chart is to be created in.
                
                The chart element will be a child of
                the canvas element.
                
                When unspecified, the chart
                element will be added as the 
                last child of the HTML document body.
            </c:documentation>
        </c:property>
        
        <!-- Behavior -->
        <c:property name="compatVersion" type="number" default="Infinity" category="Behavior">
            <c:documentation>
                The CCC version that the chart should run in.
                
                The value <tt>1</tt> emulates version 1 of CCC.
            </c:documentation>
        </c:property>
        
        <!-- Layout -->
        <c:property name="width" type="number" default="400" category="Layout">
            <c:documentation>
                The width of the <i>root</i> chart, in pixels.
            </c:documentation>
        </c:property>
        
        <c:property name="height" type="number" default="300" category="Layout">
            <c:documentation>
                The height of the <i>root</i> chart, in pixels.
            </c:documentation>
        </c:property>
        
        <c:property name="orientation" type="pvc.options.varia.Orientation" default="'vertical'" category="Layout">
            <c:documentation>
                The chart orientation indicates if 
                its main direction is vertical or horizontal.
                
                This property is supported by most chart types. 
            </c:documentation>
        </c:property>
        
        
        <c:property name="margins" type="number string pvc.options.varia.Sides" default="0" category="Layout">
            <c:documentation>
                The margins of the <i>root</i> chart.
                
                In a <i>small multiples</i> chart, 
                the margins of the <i>small</i> charts can be set
                with the property <c:link to="#smallMargins" />.
                
                See <c:link to="pvc.options.varia.Sides" /> for information about 
                the different supported data types.
            </c:documentation>
        </c:property>
        
        <c:property name="paddings" type="number string pvc.options.varia.Sides" default="0" category="Layout">
            <c:documentation>
                The paddings of <i>root</i> chart.
                
                In a <i>small multiples</i> chart, 
                the paddings of a <i>small</i> chart can be set
                with the property <c:link to="#smallPaddings" />.
                
                See <c:link to="pvc.options.varia.Sides" /> for information about 
                the different supported data types.
            </c:documentation>
        </c:property>
        
        <c:property name="contentMargins" type="number string pvc.options.varia.Sides" default="0" category="Layout">
            <c:documentation>
                The margins of the <i>root</i> content panel.
                
                In a <i>small multiples</i> chart, 
                the margins of the <i>content panel</i> of a <i>small</i> chart 
                can be set with the property <c:link to="#smallContentMargins" />.
                
                See <c:link to="pvc.options.varia.Sides" /> for information about 
                the different supported data types.
            </c:documentation>
        </c:property>
        
        <c:property name="contentPaddings" type="number string pvc.options.varia.Sides" default="0" category="Layout">
            <c:documentation>
                The paddings of the <i>root</i> content panel.
                
                In a <i>small multiples</i> chart, 
                the paddings of the <i>content panel</i> of a <i>small</i> chart 
                can be set with the property <c:link to="#smallContentPaddings" />.
                
                See <c:link to="pvc.options.varia.Sides" /> for information about 
                the different supported data types.
            </c:documentation>
        </c:property>
        
        
        <!-- MULTI / SMALL -->
        <c:property name="multiChartMax" type="number" default="Infinity" category="Multi-Chart - Layout">
            <c:documentation>
                The maximum number of <i>small</i> charts that should
                be displayed.
                
                The first <i>small</i> charts are chosen.
            </c:documentation>
        </c:property>
        
        <c:property name="multiChartColumnsMax" type="number" default="3" category="Multi-Chart - Layout">
            <c:documentation>
                The maximum number of <i>small</i> charts that should
                be displayed in a row.
                
                This property can receive a value of <tt>Infinity</tt>
                to indicate that all charts should be laid out in a single row.
            </c:documentation>
        </c:property>
        
        <c:property name="smallWidth" type="number string" category="Multi-Chart - Layout">
            <c:documentation>
                Fixates the width of each <i>small</i> chart.
                
                A value of type <tt>number</tt>, 
                or of type <tt>string</tt>, but with numeric content, 
                is interpreted as being in pixel units.
                
                A value of type <tt>string</tt>, 
                with numeric content that is suffixed by a "%" character,
                is interpreted as a percentage of the initially available content width.
                
                This property may cause the <i>small multiples</i> chart 
                to take up a greater width than the one specified in <c:link to="#width" />.
                
                When this property is unspecified,
                a specified finite value, or a defaulted value, of the property <c:link to="#multiChartColumnsMax" /> is
                used to determine it: 
                by dividing the initially available content width 
                by the maximum number of charts in a row that <i>actually</i> occur
                (so that if there are less small charts than 
                the maximum that can be placed in a row, 
                these, nevertheless, take up the whole width).
                 
                When an infinite value is specified for 
                <c:link to="#multiChartColumnsMax" />, 
                the small charts are laid out in a single row, 
                and so the width is calculated from the height <c:link to="#smallHeight" />, 
                using the aspect ratio <c:link to="#smallAspectRatio" />.
                The height is defaulted to the initially available content height.
                The aspect ratio is defaulted to a value that depends on the chart type,
                but is something around <tt>4/3</tt>.
                The width is then calculated.
            </c:documentation>
        </c:property>
        
        <c:property name="smallHeight" type="number string" category="Multi-Chart - Layout">
            <c:documentation>
                Fixates the height of each <i>small</i> chart.
                
                A value of type <tt>number</tt>, 
                or of type <tt>string</tt>, but with numeric content, 
                is interpreted as being in pixel units.
                
                A value of type <tt>string</tt>, 
                with numeric content that is suffixed by a "%" character,
                is interpreted as a percentage of the initially available content height.
                
                This property may cause the <i>small multiples</i> chart 
                to take up a greater width than the one specified in <c:link to="#height" />.
                
                When this property is unspecified, 
                its value depends on the evaluation of the
                <c:link to="#smallWidth" /> property, 
                which may impose it a value. 
                If after the evaluation of <c:link to="#smallWidth" /> 
                this property remains unspecified, 
                it is determined as follows.
                 
                If the layout will have a single column 
                and the property <c:link to="#multiChartSingleColFillsHeight" />
                is <tt>true</tt> (it is by default)
                then the height will be the initially available content height.
                
                If the layout will have a single row 
                and the property <c:link to="#multiChartSingleRowFillsHeight" />
                is <tt>true</tt> (it is by default)
                then the height will be the initially available content height.
                
                Otherwise, the property <c:link to="#smallAspectRatio" /> is 
                used to determine the height of the small chart from its determined width.
                
                The aspect ratio is defaulted to a value that depends on the chart type,
                but is something around <tt>4/3</tt>.
            </c:documentation>
        </c:property>
        
        <c:property name="smallAspectRatio" type="number" category="Multi-Chart - Layout">
            <c:documentation>
                The ratio of the width over the height of a <i>small</i> chart.
                
                It is used when the set of properties
                <c:link to="#smallWidth" />,
                <c:link to="#smallHeight" />,
                <c:link to="#multiChartColumnsMax" />,
                <c:link to="#multiChartSingleRowFillsHeight" /> and
                <c:link to="#multiChartSingleColFillsHeight" />,
                is under-specified and 
                is not enough to determine the value of both
                <c:link to="#smallWidth" /> and
                <c:link to="#smallHeight" />.
                
                The default value of the aspect ratio depends on the chart type,
                but is something around <tt>4/3</tt>.
            </c:documentation>
        </c:property>
        
        <c:property name="multiChartSingleRowFillsHeight" type="boolean" default="true" category="Multi-Chart - Layout">
            <c:documentation>
                Indicates that, 
                when the layout results in a single row
                and the value of <c:link to="#smallHeight" />
                is still to be determined, 
                it should be set to all the initially available content height,
                instead of determining the height from the 
                <c:link to="#smallAspectRatio" /> and the <c:link to="#smallWidth" />.
            </c:documentation>
        </c:property>
        
        <c:property name="multiChartSingleColFillsHeight" type="boolean" default="true" category="Multi-Chart - Layout">
            <c:documentation>
                Indicates that, 
                when the layout results in a single column
                and the value of <c:link to="#smallHeight" />
                is still to be determined, 
                it should be set to all the initially available content height,
                instead of determining the height from the 
                <c:link to="#smallAspectRatio" /> and the <c:link to="#smallWidth" />.
            </c:documentation>
        </c:property>
        
        <c:property name="smallMargins" type="number string pvc.options.varia.Sides" default="'2%'" category="Multi-Chart - Layout">
            <c:documentation>
                The margins of a <i>small</i> chart.
                
                See <c:link to="pvc.options.varia.Sides" /> for information about 
                the different supported data types.
            </c:documentation>
        </c:property>
        
        <c:property name="smallPaddings" type="number string pvc.options.varia.Sides" default="0" category="Multi-Chart - Layout">
            <c:documentation>
                The paddings of a <i>small</i> chart.
                
                See <c:link to="pvc.options.varia.Sides" /> for information about 
                the different supported data types.
            </c:documentation>
        </c:property>
        
        <c:property name="smallContentMargins" type="number string pvc.options.varia.Sides" default="0" category="Multi-Chart - Layout">
            <c:documentation>
                The margins of the <i>content panel</i> of a <i>small</i> chart. 
                
                See <c:link to="pvc.options.varia.Sides" /> for information about 
                the different supported data types.
            </c:documentation>
        </c:property>
        
        <c:property name="smallContentPaddings" type="number string pvc.options.varia.Sides" default="0" category="Multi-Chart - Layout">
            <c:documentation>
                The paddings of the <i>content panel</i> of a <i>small</i> chart.
                
                See <c:link to="pvc.options.varia.Sides" /> for information about 
                the different supported data types.
            </c:documentation>
        </c:property>
        
        
        <!-- Interaction -->
        <c:property name="animate" type="boolean" default="true" category="Interaction">
            <c:documentation>
                Indicates if a chart should show an entry animation, 
                every time it is fully rendered.
                Most charts perform some sort of entry animation 
                of its main visual elements.
                
                When a chart is rendered explicitly, 
                through its <tt>render</tt> method,
                it is possble to control whether the entry animation 
                is performed or not.
            </c:documentation>
        </c:property>
        
        <c:property name="clickable" type="boolean" default="false" category="Interaction">
            <c:documentation>
                Indicates if the chart is clickable by the user.
                
                If this option is <tt>false</tt>, 
                any click-related actions will not be executed 
                (ex: 
                <c:link to="#clickAction" />,
                <c:link to="#doubleClickAction" />, or
                <c:link to="pvc.options.varia.DiscreteAxisOptions#clickAction" />).
            </c:documentation>
        </c:property>
        
        <c:property name="hoverable" type="boolean" default="false" category="Interaction">
            <c:documentation>
                Indicates if the chart's visual elements
                are automatically highlighted 
                when the user hovers over them with the mouse.
            </c:documentation>
        </c:property>
        
        <c:property name="selectable" type="boolean" default="false" category="Interaction">
            <c:documentation>
                Indicates if the chart's visual elements
                can be selected by the user, 
                by clicking on them 
                or using the rubber-band.
            </c:documentation>
        </c:property>
        
        <c:property name="showTooltips" type="boolean" default="true" category="Interaction">
            <c:documentation>
                Indicates if tooltips are shown
                when the user hovers over visual elements with the mouse.
            </c:documentation>
        </c:property>
        
        <c:property name="ctrlSelectMode" type="boolean" default="true" category="Interaction">
            <c:documentation>
                When <tt>true</tt>, 
                indicates that a selection made by the user 
                replaces the current selection, if any.
                
                For the selection to be additive, 
                the <tt>CTRL</tt> key must be pressed, 
                by the end of the operation.
                
                When <tt>false</tt>,
                indicates that any selection made by the user is additive.
                The <tt>CTRL</tt> key has no effect.
            </c:documentation>
        </c:property>
        
        <c:property name="clearSelectionMode" 
                    type="pvc.options.varia.ClearSelectionMode" 
                    default="'emptySpaceClick'" 
                    category="Interaction">
            <c:documentation>
            
                Controls if and how the selection can be cleared by the user.
            </c:documentation>
        </c:property>
        
        <c:property name="doubleClickMaxDelay" type="number" default="300" category="Interaction">
            <c:documentation>
                The maximum number of milliseconds,
                between two consecutive clicks,
                for them to be considered a double-click.
            </c:documentation>
        </c:property>
        
        <c:property name="tooltipFormat" type="pvc.options.varia.TooltipFormatter" category="Interaction">
            <c:documentation>
                A callback function that is called,
                to build the tooltip of a visual element.
                
                Whether the tooltip format is HTML or plain text must 
                be known by the formatter.
            </c:documentation>
        </c:property>
        
        <c:property name="tipsySettings" type="pvc.options.TooltipOptions" category="Interaction">
            <c:documentation>
                Contains tooltip presentation options.
            </c:documentation>
        </c:property>
        
        <!-- Actions -->
        <c:property name="renderCallback" type="pvc.options.varia.StandardAction" category="Actions">
            <c:documentation>
                A callback function that is called
                before the chart is rendered,
                but after if has been pre-rendered.
                
                You can use this action to:
                <ul>
                    <li>use the <i>mark events</i> API on time-series categorical charts</li>
                    <li>extend in special ways the already created protovis marks.</li>
                </ul>
            </c:documentation>
        </c:property>
        
        <c:property name="clickAction" type="pvc.options.varia.StandardAction" category="Actions">
            <c:documentation>
                A callback function that is called,
                when the user clicks on a visual element.
            </c:documentation>
        </c:property>
        
        <c:property name="doubleClickAction" type="pvc.options.varia.StandardAction" category="Actions">
            <c:documentation>
                A callback function that is called,
                when the user double-clicks on a visual element.
            </c:documentation>
        </c:property>
        
        <c:property name="selectionChangedAction" type="pvc.options.varia.SelectionChangedAction" category="Actions">
            <c:documentation>
                A callback function that is called
                when, after selection has changed,
                the chart is updated to reflect the change.
            </c:documentation>
        </c:property>
        
        <c:property name="userSelectionAction" type="pvc.options.varia.UserSelectionAction" category="Actions">
            <c:documentation>
                A callback function that is called
                when the user performs a selection,
                but before the corresponding datums' selected state are actually changed.
                
                This function is usefull to restrict, amplify, or normalize the selection.
            </c:documentation>
        </c:property>
        
        <!-- Data -->
        <c:property name="ignoreNulls" type="boolean" default="true" category="Data">
            <c:documentation>
                Indicates if datums
                whose value of all measure dimensions is null 
                should be ignored.
                
                A dimension is considered a measure dimension if 
                there is at least one measure role currently bound to it.
            </c:documentation>
        </c:property>
        
        <c:property name="timeSeries" type="boolean" default="false" category="Data">
            <c:documentation>
                Indicates that dimensions of the "category" group 
                (i.e. named <tt>category</tt>, <tt>category2</tt>, ...)
                have a <tt>Date</tt> value type,
                by default.
                
                This option has no effect on other dimensions,
                even if bound to a "category" visual role.
                In those cases,
                explicitly define the dimension with
                the <tt>Date</tt> value type.
                
                Dimensions are considered continuous, by default,
                when they have a continuous value type.
                However, 
                not all visual roles support continuous dimensions.
                In those cases, 
                the dimension is treated as a discrete dimension,
                event though it has a continuous value type.
            </c:documentation>
        </c:property>
        
        <c:property name="timeSeriesFormat" type="string" default="'%Y-%m-%d'" category="Data">
            <c:documentation>
                The format string used by default to <i>parse</i>
                dimensions of the <tt>Date</tt> value type.
                
                The syntax of the format string is that of 
                <i>protovis</i>' date formats.
                
                This property changes the default of the 
                <c:link to="pvc.options.DimensionTypeOptions#rawFormat" />
                
                 property,
                for dimensions with a <tt>Date</tt> value type.  
            </c:documentation>
        </c:property>
        
        <c:property name="groupedLabelSep" type="string" default="' ~ '" category="Data">
            <c:documentation>
                The separator used to join the labels of the values of 
                a multi-dimensional visual role.
                
                For example, if a visual role, 
                has the dimensions "Territory" and "ProductType",
                a compound value could be shown as "EMEA ~ Classic Cars". 
            </c:documentation>
        </c:property>
        
        <c:property name="valueFormat" type="pvc.options.varia.NumberFormatter" category="Data">
            <c:documentation>
                A function that formats the
                non-null <i>numeric</i> values
                of the dimensions named <tt>value</tt>, <tt>value2</tt>, etc.
                
                This property is used to default the property 
                <c:link to="pvc.options.DimensionTypeOptions#formatter" />
                of the mentioned dimensions.
                
                The default value of this option is a function that 
                formats numbers with two decimal places.
            </c:documentation>
        </c:property>
        
        <c:property name="percentValueFormat" type="pvc.options.varia.NumberFormatter" category="Data">
            <c:documentation>
                A function used to format non-null numeric values
                as percentages.
                
                The numeric value has still to be multiplied by 100.
                
                This function is used whenever a chart needs to 
                show percentages of a numeric dimension, 
                like is the case for the tooltips of a stacked chart or
                the percentages shown in a Pie chart.
                
                The default value of this option is a function that 
                formats percentages with one decimal place and 
                a "%" character suffix.
            </c:documentation>
        </c:property>
        
        <c:property name="dimensions" type="map(string : pvc.options.DimensionTypeOptions)" category="Data">
            <c:documentation>
                A map whose keys are 
                the dimension type names and whose values are 
                the dimension type options. 
                
                You don't need to define dimensions 
                unless you want to change their name or properties.
                Charts automatically define default dimensions
                to satisfy their visual roles' requirements.
                
                Dimension options can be partial, 
                so that it is possible to override only certain options.
            </c:documentation>
        </c:property>
        
        <c:property name="dimensionGroups" type="map(string : pvc.options.DimensionTypeOptions)" category="Data">
            <c:documentation>
                A map whose keys are 
                the dimension type group names and whose values are 
                the default dimension type group options.
                
                A dimension type group is 
                a group of dimension types
                that have a common non-numeric prefix in its name.
                
                This property does not define any dimension types, per si,
                but allows specifying default values
                for dimension types of a group, 
                that apply in case they are effectively used.
            </c:documentation>
        </c:property>
        
        <!-- Data Translation -->
        <c:property name="crosstabMode" type="boolean" default="true" category="Data Translation">
            <c:documentation>
                Indicates if the data source is in <i>crosstab</i> format.
            </c:documentation>
        </c:property>
        
        <c:property name="seriesInRows" type="boolean" default="false" category="Data Translation">
            <c:documentation>
                Indicates if, 
                in the data source, 
                the "series" data is in the rows, 
                instead of, as is more usual, in the columns.
                
                The name of this option is inspired in 
                the <i>crosstab</i> format, 
                where the "series" values are placed in the first row,
                and "category" values are placed in the first column
                (corner cell is empty).
                
                When this option is <tt>true</tt>, in the <i>crosstab</i> format,
                the result is equivalent to transposing the data table,
                which results in "series" data being placed in the first column,
                i.e. <i>in the rows</i>, 
                and the "category" data being placed in the first row.
                
                In the <i>relational</i> data source format, 
                this option effects a conceptually equivalent operation,
                by switching the "series" and "category" columns.
            </c:documentation>
        </c:property>
        
        <c:property name="multiChartIndexes" type="number string" default="true" category="Data Translation">
            <c:documentation>
                The indexes of the data source's <i>virtual item</i> columns
                that are to feed the 
                default 
                <tt>multiChart</tt>, 
                <tt>multiChart2</tt>, ... 
                dimensions.
            </c:documentation>
        </c:property>
        
        <c:property name="isMultiValued" type="boolean" default="false" category="Data Translation">
            <c:documentation>
                Indicates if the data source has 
                multiple value dimensions.
            </c:documentation>
        </c:property>
        
        <c:property name="measuresIndexes" type="number string list(number string)" default="true" category="Data Translation">
            <c:documentation>
                The indexes of the data source's <i>virtual item</i> columns
                that are to feed the 
                default 
                <tt>value</tt>, 
                <tt>value2</tt>, ... 
                dimensions.
                
                This option only applies to data sources in 
                relational format with multiple values, 
                i.e., 
                when 
                <tt>crosstabMode=false</tt> and 
                <tt>isMultiValued=true</tt>.
            </c:documentation>
        </c:property>
        
        <c:property name="readers" type="list(pvc.options.DimensionsReaderOptions)" category="Data Translation">
            <c:documentation>
                An array of dimensions readers.
                 
                Can be specified to customize the 
                translation process of the data source. 
            </c:documentation>
        </c:property>
        
        <c:property name="calculations" type="list(pvc.options.DimensionsCalculationOptions)" category="Data">
            <c:documentation>
                An array of dimensions calculations.
                 
                Can be specified to calculate the values of certain dimensions.
            </c:documentation>
        </c:property>
        
        <c:property name="secondAxisIdx" type="number string list(number|string)" category="Data">
            <c:documentation>
                <c:deprecated>Use <c:link to="#plot2Series"/> instead.</c:deprecated>
                The zero-based indexes of the series, 
                in <i>the order of appearance in the data source</i>, 
                that are to be shown in the second axis, 
                on chart types that support it.
                
                A negative index designates an index from the last series.
                So <tt>-1</tt> is the last series, 
                <tt>-2</tt> is the next-to-last series, 
                etc.
                
                This option is only relevant when the property
                <c:link to="#secondAxis" /> has the value <tt>true</tt>.
            </c:documentation>
        </c:property>
        
        <!-- Plot -->
        <c:property name="plot2" type="boolean" default="false" category="Plot">
            <c:documentation>
                Indicates that the 
                series identified in <c:link to="#plot2Series" />
                are plotted in a separate plot.
                
                In the bar chart, in the box-plot chart and in 
                the point-family charts the second plot is a generic point plot.
                
                In the metric point chart, 
                the second plot is another metric point plot.
            </c:documentation>
        </c:property>
        
        <c:property name="plot2Series" type="string list(string)" category="Data">
            <c:documentation>
                The <i>key values</i> of the series visual role, 
                that are to be shown in the second plot.
                
                If the series visual role has more than one dimension, 
                the specified keys should be 
                the result of joining the key of each dimension with a "~" character.
                
                This option is only relevant when the property
                <c:link to="#plot2" /> has the value <tt>true</tt>.
            </c:documentation>
        </c:property>
        
        <c:property name="plot2ColorAxis" type="number" default="1" category="Style">
            <c:documentation>
                Indicates that the data shown in the second plot should
                use a separate color scheme, 
                as specified in <c:link to="#secondAxisColor" />.
                
                Valid values are <tt>1</tt> and <tt>2</tt>.
            </c:documentation>
        </c:property>
        
        <c:property name="colors" type="list(pvc.options.varia.ColorString)" category="Style">
            <c:documentation>
                The discrete colors scheme to use to distinguish visual elements
                that are colored using the <i>first</i> color axis. 
                
                With a few exceptions, 
                color axes map values of the "color" visual role.
            </c:documentation>
        </c:property>
        
        <c:property name="color2AxisColors" type="list(pvc.options.varia.ColorString)" category="Style">
            <c:documentation>
                The discrete colors scheme to use to distinguish visual elements
                that are colored using the <i>second</i> color axis. 
                
                With a few exceptions, 
                color axes map values of the "color" visual role.
            </c:documentation>
        </c:property>
        
        <c:property name="secondAxisColor" type="list(pvc.options.varia.ColorString)" category="Style">
            <c:documentation>
                <c:deprecated>Use <c:link to="#color2AxisColors" /> instead.</c:deprecated>
                The discrete colors scheme to use to distinguish visual elements
                that are colored using the <i>second</i> color axis. 
            </c:documentation>
        </c:property>
        
        <c:property name="secondAxis" type="boolean" default="false" category="Plot">
            <c:documentation>
                <c:deprecated>Use <c:link to="#plot2"/> instead.</c:deprecated>
                Indicates whether selected series  
                are plotted in a separate plot.
            </c:documentation>
        </c:property>
        
        <c:property name="secondAxisIndependentScale" type="boolean" default="false" category="Data">
            <c:documentation>
                <c:deprecated>Use <c:link to="#plot2OrthoAxis"/> instead, to specify an alternate orthogonal axis.</c:deprecated>
                Indicates whether the secondary axis should be 
                shown and with an independent range.
            </c:documentation>
        </c:property>
        
        <c:property name="extensionPoints" type="pvc.options.ext.ChartCommonExtensionPoints" category="Style">
            <c:documentation>
                The extension points object 
                contains style definitions for 
                various visual elements of the chart.
            </c:documentation>
        </c:property>
    </c:complexType>
    
    <c:complexType name="ChartCommonVisualRoles" space="pvc.options.roles">
        <c:documentation>
            The visual roles common to all chart types.
        </c:documentation>
        <c:property name="multiChart" type="string pvc.options.roles.VisualRoleOptions">
            <c:documentation>
                The <tt>multiChart</tt> visual role
                allows turning a chart in a small multiples chart
                <c:link to="http://en.wikipedia.org/wiki/Small_multiple" />.
                
                Almost all main chart types support being shown
                as a small multiples chart.
                Currently, the exceptions are the charts: 
                <i>Heat Grid</i>, 
                <i>Bullet</i>, 
                <i>Data Tree</i> and
                <i>Parallel Coordinates</i>.
                
                The <tt>multiChart</tt> visual role
                can be bound to any number of dimensions,
                that are, or will be turned into, discrete.
                
                The <tt>multiChart</tt> visual role automatically binds to 
                every dimension whose name has the <tt>multiChart</tt> prefix.
                
                One <i>small</i> chart is generated per
                unique combination of the values of the bound dimensions
                that is present in the source data.
                Each small chart then receives as its data
                the partition of the source data that shares its 
                unique combination of values.
                
                See <c:link to="pvc.options.roles.VisualRoleOptions" />
                for more information on supported data types.
            </c:documentation>
        </c:property>
    </c:complexType>
    
    <!-- scale is undocummented -->
    <c:complexType name="ChartCommonExtensionPoints" space="pvc.options.ext">
        <c:documentation>
            The extension points common to all chart types.
            
            To use an extension point you must find its full name: 
            join the prefix property name, 
            like <c:link to="#base" />,
            with one of the properties of the type of the extension point,
            like <c:link to="pvc.options.marks.PanelExtensionPoint#overflow" />,
            with an "_" character in between,
            and obtain the name <tt>base_overflow</tt>.
        </c:documentation>
        
        <c:property name="base" type="pvc.options.marks.PanelExtensionPoint">
            <c:documentation>
                The extension point of the base (root) panel of the <i>root</i> chart.
            </c:documentation>
        </c:property>
        
        <c:property name="smallBase" type="pvc.options.marks.PanelExtensionPoint">
            <c:documentation>
                The extension point of the base (root) panel of the <i>small</i> charts.
            </c:documentation>
        </c:property>
        
        <c:property name="content" type="pvc.options.marks.PanelExtensionPoint">
            <c:documentation>
                The extension point of the content panel of the <i>root</i> chart.
                
                The content panel is a child of the base panel.
            </c:documentation>
        </c:property>
        
        <c:property name="smallContent" type="pvc.options.marks.PanelExtensionPoint">
            <c:documentation>
                The extension point of the content panel of the <i>small</i> charts.
                
                The content panel is a child of the base panel.
            </c:documentation>
        </c:property>
        
        <c:property name="plot" type="pvc.options.marks.PanelExtensionPoint">
            <c:documentation>
                The extension point of the plot panel of the charts.
                
                The plot panel is a child of the content panel.
            </c:documentation>
        </c:property>
        
        <c:property name="chart" type="pvc.options.marks.PanelExtensionPoint">
            <c:documentation>
                <c:deprecated>
                    Please use the extension point <c:link to="#plot" /> instead. 
                </c:deprecated>
                The extension point of the plot panel of the charts.
                
                The plot panel is a child of the content panel.
            </c:documentation>
        </c:property>
    </c:complexType>
    
    <c:complexType name="TooltipOptions" space="pvc.options">
        <c:documentation>
            The options documentation class of the tooltip.
            <!-- TODO -->
        </c:documentation>
    </c:complexType>
    
    <c:complexType name="DimensionTypeOptions" space="pvc.options">
        <c:documentation>
            The options documentation class of a dimension type.
        </c:documentation>
        <c:property name="label" type="string" category="Presentation">
            <c:documentation>
                The name of the dimension type as it is shown to the user.
                
                The label <i>should</i> be unique.
                
                The default value is built from the dimension name,
                by converting the first character to upper case.
                <!-- 
                TODO: I think this is incorrect: 
                it receives the bound to role, when bound?
                 -->
            </c:documentation>
        </c:property>
        <c:property name="valueType" type="pvc.options.varia.DimensionValueType" default="null" category="Data">
            <c:documentation>
                The type of value that dimensions of this type will hold.
            </c:documentation>
        </c:property>
        <c:property name="isDiscrete" type="boolean" category="Data">
            <c:documentation>
                Indicates if a dimension type should be considered discrete
                or continuous.
                
                Only dimension types whose <c:link to="#valueType" /> 
                is one of 
                <c:link to="pvc.options.varia.DimensionValueType#Number" /> or
                <c:link to="pvc.options.varia.DimensionValueType#Date" />
                can be continuous.
                
                Some chart types support binding 
                a continuous or a discrete dimension to a visual role,
                yielding different visual results.
                An example is the "color" visual role of the Metric Line/Dot charts.
                Another example is the Line/Dot/Area chart that supports
                both a continuous or a discrete dimension in its "category" visual role.  
                
                The default value dependends on the value of <c:link to="#valueType" />.
                If it can be continuous, then the default value is <tt>false</tt>.
                If it cannot, the default value is <tt>true</tt>.
            </c:documentation>
        </c:property>
        
        <c:property name="converter" type="pvc.options.varia.DimensionConverter" category="Data">
            <c:documentation>
                Converts a non-null raw value, 
                as read from the data source,
                into a value of the dimension's <c:link to="#valueType" />.
                
                The returned value 
                need not have the type of the dimension's value type.
                Yet, 
                it must be such that 
                the associated value type's cast function can 
                convert it to the dimension's value type.
                In this way, 
                only "non-standard" conversions
                need to be handled with a converter function.
                
                Values that are not convertible by the dimension's value type 
                cast function become null.
                
                Also, note that the only value type that 
                does not have a cast function is the  
                <c:link to="pvc.options.varia.DimensionValueType#Any" />.
                
                When unspecified and 
                the value type is <c:link to="pvc.options.varia.DimensionValueType#Date" />,
                and the option <c:link to="#rawFormat" /> is specified
                a default converter is created for it.
            </c:documentation>
        </c:property>
        <c:property name="rawFormat" type="string" category="Data">
            <c:documentation>
                A protovis format string that is to parse the raw value.
                
                Currently, this option is ignored unless the 
                option <c:link to="#converter" /> is unspecified
                and the value type is 
                <c:link to="pvc.options.varia.DimensionValueType#Date" />.
                
                When the chart option 
                <c:link to="pvc.options.charts.ChartCommonOptions#timeSeriesFormat" />,
                is specified,
                and the value type is 
                <c:link to="pvc.options.varia.DimensionValueType#Date" />,
                it is taken as the <i>default value</i> of this option.
                
                A converter function is created to parse
                raw values with the specified format string.
            </c:documentation>
        </c:property>
        <c:property name="key" type="pvc.options.varia.DimensionKey" category="Data">
            <c:documentation>
                A function that converts a non-null value of the dimension's 
                <c:link to="pvc.options.DimensionTypeOptions#valueType" />
                into a string that (uniquely) identifies
                the value in the dimension.
                
                The default key function is 
                the standard JavaScript <tt>String</tt> function,
                and is suitable for most value types.
                
                If the dimension's value type is one of 
                <c:link to="pvc.options.varia.DimensionValueType#Any" /> or
                <c:link to="pvc.options.varia.DimensionValueType#Object" />
                the <tt>String</tt> function may not be suitable to 
                identify the values.
                
                If more than one value has a given key,
                only the first one will be stored in the dimension.
            </c:documentation>
        </c:property>
        <c:property name="comparer" type="pvc.options.varia.DimensionComparer" category="Data">
            <c:documentation>
                A function that compares two different and non-null values of the dimension's 
                <c:link to="pvc.options.DimensionTypeOptions#valueType" />.
                
                When unspecified, 
                a default natural order comparer function
                is applied to the continuous value types:
                <c:link to="pvc.options.varia.DimensionValueType#Number" /> and
                <c:link to="pvc.options.varia.DimensionValueType#Date" />.
                
                Dimension types that do not have a comparer 
                function "compare" their values by "input order" 
                - order of first appearance, in the data source.
            </c:documentation>
        </c:property>
        
        <c:property name="formatter" type="pvc.options.varia.DimensionFormatter" category="Presentation">
            <c:documentation>
                A function that formats a value, 
                possibly null, 
                of the dimension's 
                <c:link to="pvc.options.DimensionTypeOptions#valueType" />.
                
                Note that, the chart option 
                <c:link to="pvc.options.charts.ChartCommonOptions#valueFormat" />,
                is used to build a default formatter function 
                for numeric dimensions of the "value" dimension group.
                
                When unspecified and 
                the value type is <c:link to="pvc.options.varia.DimensionValueType#Number" />,
                a default formatter is created that formats numbers with two decimal places.
                
                When unspecified and 
                the value type is <c:link to="pvc.options.varia.DimensionValueType#Date" />,
                and the option <c:link to="#format" /> is specified (or implied)
                a default formatter is created for it.
                
                Otherwise a value is formatted by calling 
                the standard JavaScript <tt>String</tt> function on it.
            </c:documentation>
        </c:property>
        <c:property name="format" type="string" category="Presentation">
            <c:documentation>
                A protovis format string that is to format a value of 
                the dimension's 
                <c:link to="pvc.options.DimensionTypeOptions#valueType" />.
                
                Currently, this option is ignored unless the 
                option <c:link to="#formatter" /> is unspecified
                and the value type is 
                <c:link to="pvc.options.varia.DimensionValueType#Date" />.
                
                When unspecified, 
                but the option <c:link to="#rawFormat" /> is specified,
                a format string is created from the later 
                (simply by replacing "-" with "/").
                
                A formatter function is created to format
                values with the specified or implied format string.
            </c:documentation>
        </c:property>
        
        <c:property name="isHidden" type="boolean" default="false" category="Presentation">
            <c:documentation>
                Indicates if values of this dimension type 
                should be hidden from the user.
                
                This option is useful to hide auxiliar dimensions that are used to:
                <ul> 
                    <li>hold extra data, required for drill-down purposes</li>
                    <li>
                        complete the minimal working information a chart needs to work, 
                        like, for example, 
                        a "series" dimension created automatically by a chart if 
                        its required "series" visual role was not unbound
                    </li>
                </ul>
                
                The only place where the values of a dimension that is not bound to a visual role
                are shown to the user is the tooltip, as it is formatted by default.
                To prevent this, 
                set the dimension type's <tt>isHidden</tt> option to <tt>true</tt>.
            </c:documentation>
        </c:property>
        
    </c:complexType>
    
    <c:complexType name="DimensionsCalculationOptions" space="pvc.options">
        <c:documentation>
            A dimensions calculation allows the values of a dimension
            to be calculated from the typed values of 
            the other non-calculated dimensions.
            
            While a dimensions reader could achieve the same result, 
            it works by reading values from the virtual item,
            accessing it by index.
            That would require the knowledge of the indexes 
            in which the desired dimensions were, 
            which is many times not true, 
            specially when the mapping between 
            dimensions and virtual item indexes is determined automatically
            by the data translator.
        </c:documentation>
        
        <c:property name="names" type="string list(string)" category="General">
            <c:documentation>
                The name or names of the dimensions that 
                are calculated by the calculation.
                
                When the argument is a string, it can be a list of names, 
                separated by the character ",".
                
                Only one dimensions calculation or dimensions reader
                can calculate or read a given dimension.
            </c:documentation> 
        </c:property>
        
        <c:property name="calculation" type="pvc.options.varia.DimensionsCalculation" required="true" category="General">
            <c:documentation>
                A dimensions calculation function.
            </c:documentation> 
        </c:property>
    </c:complexType>
    
    <c:complexType name="DimensionsReaderOptions" space="pvc.options">
        <c:documentation>
            The options documentation class of a data dimensions reader.
            
            A dimensions reader is executed for each row of a 
            data source to convert values of one or more columns
            into one or more atoms of certain dimensions.
            
            Together, a set of dimensions readers, 
            are executed to fully convert 
            each data source row into atoms of the defined dimension types. 
            The atoms of each row are used to construct a datum.
            
            The mentioned data source row is called the "virtual item".
            Depending on the data source format the actual rows 
            carry different informaton. 
            The virtual item is a normalized view of each row of the data source,
            independent of its format.
            
            A dimensions reader can be configured in the following ways:
            <dl>
                <dt>specify <tt>names</tt> but not <tt>reader</tt></dt>
                <dd>
                    names are paired with any specified indexes, from left to right;
                    excess indexes feed dimensions whose name starts with the last specified name (a dimension group);
                    excess names are fed with the <i>non reserved</i>indexes 
                    that follow the last specified index (or 0, if none);
                    indexes explicitly specified in dimensions readers are all
                    reserved beforehand
                </dd>
                <dt>specify <tt>indexes</tt> but not <tt>names</tt> and <tt>reader</tt></dt>
                <dd>
                    the specified indexes become reserved but are not read,
                    and so are effectively ignored 
                </dd>
                <dt>specify both <tt>reader</tt> and <tt>names</tt></dt>
                <dd>
                    any specified indexes are reserved,
                    and no pairing is performed between these and the specified names;
                    the reader function may 
                    read any cell from the virtual item and 
                    return atoms from any of the dimensions specified in <tt>names</tt>;
                    atoms of stated dimensions, that are not returned, 
                    result in a <i>null</i> value;
                    this form allows, for example,
                    splitting a value in the virtual item into two dimensions.
                </dd>
            </dl>
        </c:documentation>
        
        <c:property name="names" type="string list(string)" category="General">
            <c:documentation>
                The name or names of the dimensions that the reader reads
                from each virtual item.
                
                When the argument is a string, it can be a list of names, 
                separated by the character ",".
                
                Only one dimensions reader or dimensions calculation can 
                read or calculate a given dimension.
            </c:documentation> 
        </c:property>
        
        <c:property name="indexes" type="number string list(number string)" category="General">
            <c:documentation>
                The index or indexes, of each virtual item, 
                that are to be read.
                
                Only one dimensions reader can state that it reads a given index
                (although a dimensions reader function may read any cells,
                 stated or not).
            </c:documentation>
        </c:property>
        
        <c:property name="reader" type="pvc.options.varia.DimensionsReader" category="General">
            <c:documentation>
                A dimensions reader function, 
                reads values mapped to dimensions 
                from a virtual item row.
                
                When unspecified, 
                one is created that performs a simple 
                mapping between the specified names and indexes.
                 
                A dimensions reader function can be specified 
                to perform non-simple operations over the read cells, 
                like the following:
                <ul>
                    <li>
                        combine values from two or more cells into a single dimension,
                    </li>
                    <li>
                        split the value of one cell into more than one dimension,
                    </li>
                    <li>
                       feed a dimension with correlated data read from an external data source.
                    </li>
                </ul>
                
                Dimensions reader functions need not be specifed to perform
                conversion or formatting operations of a single cell.
                For those cases, the dimension type's 
                <c:link to="pvc.options.DimensionTypeOptions#converter" />
                and 
                <c:link to="pvc.options.DimensionTypeOptions#formatter" />
                are more appropriate.
                
                Also, when the value of a dimension 
                is calculated from the value of other dimensions, 
                a dimensions calculation may be more appropriate:
                see <c:link to="pvc.options.DimensionsCalculationOptions"/>.
                
                The function may read cells whose indexes were not
                "reserved" in <tt>indexes</tt>. 
                Those cells might be read by other readers,
                possibly default ones created by the translator.
            </c:documentation> 
        </c:property>
    </c:complexType>
    
</c:model>