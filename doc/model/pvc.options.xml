<?xml version="1.0" encoding="UTF-8"?>
<c:model 
    xmlns:c="urn:webdetails/com/2012" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="urn:webdetails/com/2012 ../schema/com_2012.xsd"
    xmlns="http://www.w3.org/1999/xhtml">

<!--
TODO

dataOptions
 -->
 
    <!-- NAMESPACES -->
    <c:space name="pvc">
        <c:documentation>
            The global CCC namespace. 
        </c:documentation>
    </c:space>
    
    <c:space name="pvc.options">
        <c:documentation>
            The CCC options namespace.
            
            All types of this namespace,
            as well of the namespaces below this one, 
            are <b>documentation</b> types -
            they do not exist, in code, 
            and serve only to document the structure of the options objects 
            that each chart type accepts in its constructor.
            
            <c:example>
                The following code shows how to 
                create and configure a very simple CCC Bar chart:
            <pre>// Options are placed in a plain JS object
var options = {
    title:  "A CCC Bar chart",
    legend: true,
    crosstabMode: false
};

var data = {
    metadata: [
        {colIndex: 0, colType: "String", colName: "Series"}, 
        {colIndex: 1, colType: "String", colName: "Category"}, 
        {colIndex: 2, colType: "String", colName: "Value"}
    ],
    resultset: [
        ["London", "2010-01-02", 1],
        ["London", "2010-01-03", 2],
        ["London", "2010-01-04", 3],
        ["London", "2010-01-05", 2],
        ["Paris",  "2010-01-01", 3],
        ["Paris",  "2010-01-02", 6],
        ["Paris",  "2010-01-04", 1],
        ["Paris",  "2010-01-05", 7],
        ["Lisbon", "2010-01-01", 3],
        ["Lisbon", "2010-01-02", 2],
        ["Lisbon", "2010-01-03", 1],
        ["Lisbon", "2010-01-04", 5]
    ]
};

new pvc.BarChart(options)
.setData(data)
.render();</pre>
            Note that the options object is a plain JavaScript object,
            and not a <c:link to="pvc.options.BarChartOptions" />
            </c:example>
        </c:documentation>
    </c:space>
    
    <c:space name="pvc.options.varia">
        <c:documentation>
            The namespace of various options-related helper types. 
        </c:documentation>
    </c:space>
    
    <c:space name="pvc.options.ext">
        <c:documentation>
            The namespace of CCC chart extension point classes. 
        </c:documentation>
    </c:space>
    
    <c:space name="pvc.options.roles">
        <c:documentation>
            The namespace of CCC visual roles option classes. 
        </c:documentation>
    </c:space>
    
    <c:space name="pvc.options.panels">
        <c:documentation>
            The namespace of CCC panels options classes. 
        </c:documentation>
    </c:space>
    
    <c:space name="pvc.options.marks">
        <c:documentation>
            The namespace of the options of 
            extension points of <i>protovis</i> marks. 
        </c:documentation>
    </c:space>
    
    <!-- COMPLEX TYPES - CHARTS -->
    <c:complexType name="ChartCommonOptions" space="pvc.options" abstract="true">
    
        <c:documentation>
            The common options documentation class of all charts.
        </c:documentation>
        
        <!-- Panels -->
        <c:property name="title" type="string pvc.options.panels.ChartTitlePanelOptions" category="Panels">
            <c:documentation>
                The title panel of the root chart.
                
                When a value of type <tt>string</tt> is specified, 
                it is the title text.
            </c:documentation>
        </c:property>
        
        <c:property name="smallTitle" type="pvc.options.panels.ChartTitlePanelOptions" category="Panels">
            <c:documentation>
                The title panel of the <i>small</i> chart.
                
                The text of the title of small charts is the 
                compound label of the data bound to the <tt>multiChart</tt> visual role.
            </c:documentation>
        </c:property>
        
        <c:property name="legend" type="boolean pvc.options.panels.LegendPanelOptions" category="Panels">
            <c:documentation>
                The legend panel of the root chart.
                
                When a value of type <tt>boolean</tt> is specified,
                it indicates the visibility of the legend.
                The default is <tt>false</tt>.
            </c:documentation>
        </c:property>
        
        <!-- Roles -->
        <c:property name="visualRoles" type="pvc.options.roles.ChartCommonVisualRoles" category="Data Binding">
            <c:documentation>
                The options of visual roles that are common to all chart types.
            </c:documentation>
        </c:property>
        
        <!-- Data -->
        <!-- dataOptions: undefined -->
        
        <c:property name="canvas" type="string object" category="General">
            <c:documentation>
                The identifier of the HTML element, 
                or the element itself,
                where the chart is to be created in.
                
                The chart element will be a child of
                the canvas element.
                
                When unspecified, the chart
                element will be added as the 
                last child of the HTML document body.
            </c:documentation>
        </c:property>
        
        <!-- Behavior -->
        <c:property name="compatVersion" type="number" default="Infinity" category="Behavior">
            <c:documentation>
                The CCC version that the chart should run in.
                
                The value <tt>1</tt> emulates version 1 of CCC.
            </c:documentation>
        </c:property>
        
        <!-- Layout -->
        <c:property name="width" type="number" default="400" category="Layout">
            <c:documentation>
                The width of the <i>root</i> chart, in pixels.
            </c:documentation>
        </c:property>
        
        <c:property name="height" type="number" default="300" category="Layout">
            <c:documentation>
                The height of the <i>root</i> chart, in pixels.
            </c:documentation>
        </c:property>
        
        <c:property name="orientation" type="pvc.options.varia.Orientation" default="'vertical'" category="Layout">
            <c:documentation>
                The chart orientation indicates if 
                its main direction is vertical or horizontal.
                
                This property is supported by most chart types. 
            </c:documentation>
        </c:property>
        
        
        <c:property name="margins" type="number string pvc.options.varia.Sides" default="0" category="Layout">
            <c:documentation>
                The margins of the <i>root</i> chart.
                
                In a <i>small multiples</i> chart, 
                the margins of the <i>small</i> charts can be set
                with the property <c:link to="#smallMargins" />.
                
                See <c:link to="pvc.options.varia.Sides" /> for information about 
                the different supported data types.
            </c:documentation>
        </c:property>
        
        <c:property name="paddings" type="number string pvc.options.varia.Sides" default="0" category="Layout">
            <c:documentation>
                The paddings of <i>root</i> chart.
                
                In a <i>small multiples</i> chart, 
                the paddings of a <i>small</i> chart can be set
                with the property <c:link to="#smallPaddings" />.
                
                See <c:link to="pvc.options.varia.Sides" /> for information about 
                the different supported data types.
            </c:documentation>
        </c:property>
        
        <c:property name="contentMargins" type="number string pvc.options.varia.Sides" default="0" category="Layout">
            <c:documentation>
                The margins of the <i>root</i> content panel.
                
                In a <i>small multiples</i> chart, 
                the margins of the <i>content panel</i> of a <i>small</i> chart 
                can be set with the property <c:link to="#smallContentMargins" />.
                
                See <c:link to="pvc.options.varia.Sides" /> for information about 
                the different supported data types.
            </c:documentation>
        </c:property>
        
        <c:property name="contentPaddings" type="number string pvc.options.varia.Sides" default="0" category="Layout">
            <c:documentation>
                The paddings of the <i>root</i> content panel.
                
                In a <i>small multiples</i> chart, 
                the paddings of the <i>content panel</i> of a <i>small</i> chart 
                can be set with the property <c:link to="#smallContentPaddings" />.
                
                See <c:link to="pvc.options.varia.Sides" /> for information about 
                the different supported data types.
            </c:documentation>
        </c:property>
        
        
        <!-- MULTI / SMALL -->
        <c:property name="multiChartMax" type="number" default="Infinity" category="Multi-Chart - Layout">
            <c:documentation>
                The maximum number of <i>small</i> charts that should
                be displayed.
                
                The first <i>small</i> charts are chosen.
            </c:documentation>
        </c:property>
        
        <c:property name="multiChartColumnsMax" type="number" default="3" category="Multi-Chart - Layout">
            <c:documentation>
                The maximum number of <i>small</i> charts that should
                be displayed in a row.
                
                This property can receive a value of <tt>Infinity</tt>
                to indicate that all charts should be laid out in a single row.
            </c:documentation>
        </c:property>
        
        <c:property name="smallWidth" type="number string" category="Multi-Chart - Layout">
            <c:documentation>
                Fixates the width of each <i>small</i> chart.
                
                A value of type <tt>number</tt>, 
                or of type <tt>string</tt>, but with numeric content, 
                is interpreted as being in pixel units.
                
                A value of type <tt>string</tt>, 
                with numeric content that is suffixed by a "%" character,
                is interpreted as a percentage of the initially available content width.
                
                This property may cause the <i>small multiples</i> chart 
                to take up a greater width than the one specified in <c:link to="#width" />.
                
                When this property is unspecified,
                a specified finite value, or a defaulted value, of the property <c:link to="#multiChartColumnsMax" /> is
                used to determine it: 
                by dividing the initially available content width 
                by the maximum number of charts in a row that <i>actually</i> occur
                (so that if there are less small charts than 
                the maximum that can be placed in a row, 
                these, nevertheless, take up the whole width).
                 
                When an infinite value was specified for 
                <c:link to="#multiChartColumnsMax" />, the small charts
                will be laid out in a single row, and so the width is 
                calculated from the height <c:link to="#smallHeight" />, 
                using the aspect ratio <c:link to="#smallAspectRatio" />.
                The height is defaulted to the initially available content height.
                The aspect ratio is defaulted to a value that depends on the chart type,
                but is something around <tt>4/3</tt>.
                The width is then calculated.
            </c:documentation>
        </c:property>
        
        <c:property name="smallHeight" type="number string" category="Multi-Chart - Layout">
            <c:documentation>
                Fixates the height of each <i>small</i> chart.
                
                A value of type <tt>number</tt>, 
                or of type <tt>string</tt>, but with numeric content, 
                is interpreted as being in pixel units.
                
                A value of type <tt>string</tt>, 
                with numeric content that is suffixed by a "%" character,
                is interpreted as a percentage of the initially available content height.
                
                This property may cause the <i>small multiples</i> chart 
                to take up a greater width than the one specified in <c:link to="#height" />.
                
                When this property is unspecified, 
                its value depends on the evaluation of the
                <c:link to="#smallWidth" /> property, 
                which may impose it a value. 
                If after the evaluation of <c:link to="#smallWidth" /> 
                this property remains unspecified, 
                it is determined as follows.
                 
                If the layout will have a single column 
                and the property <c:link to="#multiChartSingleColFillsHeight" />
                is <tt>true</tt> (it is by default)
                then the height will be the initially available content height.
                
                If the layout will have a single row 
                and the property <c:link to="#multiChartSingleRowFillsHeight" />
                is <tt>true</tt> (it is by default)
                then the height will be the initially available content height.
                
                Otherwise, the property <c:link to="#smallAspectRatio" /> is 
                used to determine the height of the small chart from its determined width.
                
                The aspect ratio is defaulted to a value that depends on the chart type,
                but is something around <tt>4/3</tt>.
            </c:documentation>
        </c:property>
        
        <c:property name="smallAspectRatio" type="number" category="Multi-Chart - Layout">
            <c:documentation>
                The ratio of the width over the height of a <i>small</i> chart.
                
                It is used when the set of properties
                <c:link to="#smallWidth" />,
                <c:link to="#smallHeight" />,
                <c:link to="#multiChartColumnsMax" />,
                <c:link to="#multiChartSingleRowFillsHeight" /> and
                <c:link to="#multiChartSingleColFillsHeight" />,
                is under-specified and 
                is not enough to determine the value of both
                <c:link to="#smallWidth" /> and
                <c:link to="#smallHeight" />.
                
                The default value of the aspect ratio depends on the chart type,
                but is something around <tt>4/3</tt>.
            </c:documentation>
        </c:property>
        
        <c:property name="multiChartSingleRowFillsHeight" type="boolean" default="true" category="Multi-Chart - Layout">
            <c:documentation>
                Indicates that, 
                when the layout results in a single row
                and the value of <c:link to="#smallHeight" />
                is still to be determined, 
                it should be set to all the initially available content height,
                instead of determining the height from the 
                <c:link to="#smallAspectRatio" /> and the <c:link to="#smallWidth" />.
            </c:documentation>
        </c:property>
        
        <c:property name="multiChartSingleColFillsHeight" type="boolean" default="true" category="Multi-Chart - Layout">
            <c:documentation>
                Indicates that, 
                when the layout results in a single column
                and the value of <c:link to="#smallHeight" />
                is still to be determined, 
                it should be set to all the initially available content height,
                instead of determining the height from the 
                <c:link to="#smallAspectRatio" /> and the <c:link to="#smallWidth" />.
            </c:documentation>
        </c:property>
        
        <c:property name="smallMargins" type="number string pvc.options.varia.Sides" default="'2%'" category="Multi-Chart - Layout">
            <c:documentation>
                The margins of a <i>small</i> chart.
                
                See <c:link to="pvc.options.varia.Sides" /> for information about 
                the different supported data types.
            </c:documentation>
        </c:property>
        
        <c:property name="smallPaddings" type="number string pvc.options.varia.Sides" default="0" category="Multi-Chart - Layout">
            <c:documentation>
                The paddings of a <i>small</i> chart.
                
                See <c:link to="pvc.options.varia.Sides" /> for information about 
                the different supported data types.
            </c:documentation>
        </c:property>
        
        <c:property name="smallContentMargins" type="number string pvc.options.varia.Sides" default="0" category="Multi-Chart - Layout">
            <c:documentation>
                The margins of the <i>content panel</i> of a <i>small</i> chart. 
                
                See <c:link to="pvc.options.varia.Sides" /> for information about 
                the different supported data types.
            </c:documentation>
        </c:property>
        
        <c:property name="smallContentPaddings" type="number string pvc.options.varia.Sides" default="0" category="Multi-Chart - Layout">
            <c:documentation>
                The paddings of the <i>content panel</i> of a <i>small</i> chart.
                
                See <c:link to="pvc.options.varia.Sides" /> for information about 
                the different supported data types.
            </c:documentation>
        </c:property>
        
        
        <!-- Interaction -->
        <c:property name="animate" type="boolean" default="true" category="Interaction">
            <c:documentation>
                Indicates if a chart should show an entry animation, 
                every time it is rendered.
                Most charts perform some sort of entry animation 
                of its main visual elements.
            </c:documentation>
        </c:property>
        
        <c:property name="clickable" type="boolean" default="false" category="Interaction">
            <c:documentation>
                Indicates if the chart is clickable by the user.
                
                If this option is <tt>false</tt>, 
                any click-related actions will not be executed 
                (ex: 
                <c:link to="#clickAction" />,
                <c:link to="#doubleClickAction" />, or
                <c:link to="pvc.options.varia.DiscreteAxisOptions#clickAction" />).
            </c:documentation>
        </c:property>
        
        <c:property name="hoverable" type="boolean" default="false" category="Interaction">
            <c:documentation>
                Indicates if the chart's visual elements
                are automatically highlighted 
                when the user hovers over them with the mouse.
            </c:documentation>
        </c:property>
        
        <c:property name="selectable" type="boolean" default="false" category="Interaction">
            <c:documentation>
                Indicates if the chart's visual elements
                can be selected by the user, 
                by clicking on them 
                or using the rubber-band.
            </c:documentation>
        </c:property>
        
        <c:property name="showTooltips" type="boolean" default="true" category="Interaction">
            <c:documentation>
                Indicates if tooltips are shown
                when the user hovers over visual elements with the mouse.
            </c:documentation>
        </c:property>
        
        <c:property name="ctrlSelectMode" type="boolean" default="true" category="Interaction">
            <c:documentation>
                When <tt>true</tt>, 
                indicates that a selection made by the user 
                replaces the current selection, if any.
                
                For the selection to be additive, 
                the <tt>CTRL</tt> key must be pressed, 
                by the end of the operation.
                
                When <tt>false</tt>,
                indicates that any selection made by the user is additive.
                The <tt>CTRL</tt> key has no effect.
            </c:documentation>
        </c:property>
        
        <c:property name="clearSelectionMode" 
                    type="pvc.options.varia.ClearSelectionMode" 
                    default="'emptySpaceClick'" 
                    category="Interaction">
            <c:documentation>
            
                Controls if and how the selection can be cleared by the user.
            </c:documentation>
        </c:property>
        
        <c:property name="doubleClickMaxDelay" type="number" default="300" category="Interaction">
            <c:documentation>
                The maximum number of milliseconds,
                between two consecutive clicks,
                for them to be considered a double-click.
            </c:documentation>
        </c:property>
        
        <c:property name="tooltipFormat" type="pvc.options.varia.TooltipFormatter" category="Interaction">
            <c:documentation>
                A callback function that is called,
                to build the tooltip of a visual element.
                
                Whether the tooltip format is HTML or plain text must 
                be known by the formatter.
            </c:documentation>
        </c:property>
        
        <c:property name="tipsySettings" type="TooltipOptions" category="Interaction">
            <c:documentation>
                Contains tooltip presentation options.
            </c:documentation>
        </c:property>
        
        <!-- Actions -->
        <c:property name="renderCallback" type="pvc.options.varia.StandardAction" category="Actions">
            <c:documentation>
                A callback function that is called
                before the chart is rendered,
                but after if has been pre-rendered.
                
                You can use this action to:
                <ul>
                    <li>use the <i>mark events</i> API on time-series categorical charts</li>
                    <li>extend in special ways the already created protovis marks.</li>
                </ul>
            </c:documentation>
        </c:property>
        
        <c:property name="clickAction" type="pvc.options.varia.StandardAction" category="Actions">
            <c:documentation>
                A callback function that is called,
                when the user clicks on a visual element.
            </c:documentation>
        </c:property>
        
        <c:property name="doubleClickAction" type="pvc.options.varia.StandardAction" category="Actions">
            <c:documentation>
                A callback function that is called,
                when the user double-clicks on a visual element.
            </c:documentation>
        </c:property>
        
        <c:property name="selectionChangedAction" type="pvc.options.varia.SelectionChangedAction" category="Actions">
            <c:documentation>
                A callback function that is called
                when, after selection has changed,
                the chart is updated to reflect the change.
            </c:documentation>
        </c:property>
        
        <c:property name="userSelectionAction" type="pvc.options.varia.UserSelectionAction" category="Actions">
            <c:documentation>
                A callback function that is called
                when the user performs a selection,
                but before the corresponding datums' selected state are actually changed.
                
                This function is usefull to restrict, amplify, or normalize the selection.
            </c:documentation>
        </c:property>
        
        <!-- Data -->
        <c:property name="ignoreNulls" type="boolean" default="true" category="Data">
            <c:documentation>
                Indicates if datums
                whose value of all measure dimensions is null 
                should be ignored.
                
                A dimension is considered a measure dimension if 
                there is at least one measure role currently bound to it.
            </c:documentation>
        </c:property>
        
        <c:property name="timeSeries" type="boolean" default="false" category="Data">
            <c:documentation>
                Indicates that dimensions of the "category" group 
                (i.e. named <tt>category</tt>, <tt>category2</tt>, ...)
                have a <tt>Date</tt> value type,
                by default.
                
                This option has no effect on other dimensions,
                even if bound to a "category" visual role.
                In those cases,
                explicitly define the dimension with
                the <tt>Date</tt> value type.
                
                Dimensions are considered continuous, by default,
                when they have a continuous value type.
                However, 
                not all visual roles support continuous dimensions.
                In those cases, 
                the dimension is treated as a discrete dimension,
                event though it has a continuous value type.
            </c:documentation>
        </c:property>
        
        <c:property name="timeSeriesFormat" type="string" default="'%Y-%m-%d'" category="Data">
            <c:documentation>
                The format string used by default to <i>parse</i>
                dimensions of the <tt>Date</tt> value type.
                
                The syntax of the format string is that of 
                <i>protovis</i>' date formats.
                
                This property changes the default of the 
                <c:link to="pvc.options.varia.DimensionTypeOptions#rawFormat" />
                
                 property,
                for dimensions with a <tt>Date</tt> value type.  
            </c:documentation>
        </c:property>
        
        <c:property name="groupedLabelSep" type="string" default="' ~ '" category="Data">
            <c:documentation>
                The separator used to join the labels of the values of 
                a multi-dimensional visual role.
                
                For example, if a visual role, 
                has the dimensions "Territory" and "ProductType",
                a compound value could be shown as "EMEA ~ Classic Cars". 
            </c:documentation>
        </c:property>
        
        <c:property name="valueFormat" type="pvc.options.varia.NumberFormatter" category="Data">
            <c:documentation>
                A function that formats the
                non-null <i>numeric</i> values
                of the dimensions named <tt>value</tt>, <tt>value2</tt>, etc.
                
                This property is used to default the property 
                <c:link to="pvc.options.varia.DimensionTypeOptions#formatter" />
                of the mentioned dimensions.
                
                The default value of this option is a function that 
                formats numbers with two decimal places.
            </c:documentation>
        </c:property>
        
        <c:property name="percentValueFormat" type="pvc.options.varia.NumberFormatter" category="Data">
            <c:documentation>
                A function used to format non-null numeric values
                as percentages.
                
                The numeric value has still to be multiplied by 100.
                
                This function is used whenever a chart needs to 
                show percentages of a numeric dimension, 
                like is the case for the tooltips of a stacked chart or
                the percentages shown in a Pie chart.
                
                The default value of this option is a function that 
                formats percentages with one decimal place and 
                a "%" character suffix.
            </c:documentation>
        </c:property>
        
        <c:property name="dimensions" type="map(string : pvc.options.varia.DimensionTypeOptions)" category="Data">
            <c:documentation>
                A map whose keys are 
                the dimension type names and whose values are 
                the dimension type options. 
                
                You don't need to define dimensions 
                unless you want to change their name or properties.
                Charts automatically define default dimensions
                to satisfy their visual roles' requirements.
                
                Dimension options can be partial, 
                so that it is possible to override only certain options.
            </c:documentation>
        </c:property>
        
        <c:property name="dimensionGroups" type="map(string : pvc.options.varia.DimensionTypeOptions)" category="Data">
            <c:documentation>
                A map whose keys are 
                the dimension type group names and whose values are 
                the default dimension type group options.
                
                A dimension type group is 
                a group of dimension types
                that have a common non-numeric prefix in its name.
                
                This property does not define any dimension types, per si,
                but allows specifying default values
                for dimension types of a group, 
                that apply in case they are effectively used.
            </c:documentation>
        </c:property>
        
        <!-- Data Translation -->
        <c:property name="crosstabMode" type="boolean" default="true" category="Data Translation">
            <c:documentation>
                Indicates if the data source is in <i>crosstab</i> format.
            </c:documentation>
        </c:property>
        
        <c:property name="seriesInRows" type="boolean" default="false" category="Data Translation">
            <c:documentation>
                Indicates if, 
                in the data source, 
                the "series" data is in the rows, 
                instead of, as is more usual, in the columns.
                
                The name of this option is inspired in 
                the <i>crosstab</i> format, 
                where the "series" values are placed in the first row,
                and "category" values are placed in the first column
                (corner cell is empty).
                
                When this option is <tt>true</tt>, in the <i>crosstab</i> format,
                the result is equivalent to transposing the data table,
                which results in "series" data being placed in the first column,
                i.e. <i>in the rows</i>, 
                and the "category" data being placed in the first row.
                
                In the <i>relational</i> data source format, 
                this option effects a conceptually equivalent operation,
                by switching the "series" and "category" columns.
            </c:documentation>
        </c:property>
        
        <c:property name="multiChartIndexes" type="number string" default="true" category="Data Translation">
            <c:documentation>
                The indexes of the data source's <i>virtual item</i> columns
                that are to feed the 
                default 
                <tt>multiChart</tt>, 
                <tt>multiChart2</tt>, ... 
                dimensions.
            </c:documentation>
        </c:property>
        
        <c:property name="isMultiValued" type="boolean" default="false" category="Data Translation">
            <c:documentation>
                Indicates if the data source has 
                multiple value dimensions.
            </c:documentation>
        </c:property>
        
        <c:property name="measuresIndexes" type="number string list(number string)" default="true" category="Data Translation">
            <c:documentation>
                The indexes of the data source's <i>virtual item</i> columns
                that are to feed the 
                default 
                <tt>value</tt>, 
                <tt>value2</tt>, ... 
                dimensions.
                
                This option only applies to data sources in 
                relational format with multiple values, 
                i.e., 
                when 
                <tt>crosstabMode=false</tt> and 
                <tt>isMultiValued=true</tt>.
            </c:documentation>
        </c:property>
        
        <c:property name="readers" type="list(pvc.options.varia.DimensionsReaderOptions)" category="Data Translation">
            <c:documentation>
                An array of dimensions readers.
                 
                Can be specified to customize the 
                translation process of the data source. 
            </c:documentation>
        </c:property>
    
        <!-- Style -->
        <c:property name="secondAxis" type="boolean" default="false" category="Data">
            <c:documentation>
                Indicates whether selected series should be plotted against 
                a secondary orthogonal axis.
                
                TODO: Only supported on Bar and Line.
            </c:documentation>
        </c:property>
        
        <c:property name="secondAxisIndependentScale" type="boolean" default="false" category="Data">
            <c:documentation>
                Indicates whether the secondary axis should be 
                shown and with an independent range.
                
                TODO: Only supported on Bar and Line.
            </c:documentation>
        </c:property>
        
        <c:property name="secondAxisIdx" type="number string list(number|string)" category="Data">
            <c:documentation>
                <c:deprecated>Use <c:link to="#plot2Series"/> instead.</c:deprecated>
                The zero-based indexes of the series, 
                in <i>the order of appearance in the data source</i>, 
                that are to be shown in the second axis, 
                on chart types that support it.
                
                A negative index designates an index from the last series.
                So <tt>-1</tt> is the last series, 
                <tt>-2</tt> is the next-to-last series, 
                etc.
                
                This option is only relevant when the property
                <c:link to="#secondAxis" /> has the value <tt>true</tt>.
            </c:documentation>
        </c:property>
        
        <c:property name="plot2Series" type="string list(string)" default="-1" category="Data">
            <c:documentation>
                The <i>key values</i> of the series visual role, 
                that are to be shown in the second axis, 
                on chart types that support it.
                
                If the series visual role has more than one dimension, 
                the specified keys should be 
                the result of joining the key of each dimension with a "~" character.
                
                This option is only relevant when the property
                <c:link to="#secondAxis" /> has the value <tt>true</tt>.
            </c:documentation>
        </c:property>
        
        <c:property name="colors" type="list(pvc.options.varia.ColorString)" category="Style">
            <c:documentation>
                The color scheme to use to 
                distinguish visual elements of the same series, or, 
                in some cases, category.
            </c:documentation>
        </c:property>
        
        <c:property name="color2AxisColors" type="list(pvc.options.varia.ColorString)" category="Style">
            <c:documentation>
                The array of colors to use to 
                distinguish visual elements of different series,
                on a plot that uses the second color axis.
                
                This option is relevant when the 
                property <c:link to="#plot2ColorAxis" /> has the value <tt>2</tt>.
            </c:documentation>
        </c:property>
        
        <c:property name="secondAxisColor" type="list(pvc.options.varia.ColorString)" category="Style">
            <c:documentation>
                <c:deprecated>Use <c:link to="color2AxisColors" /> instead.</c:deprecated>
                The array of colors to use to 
                distinguish visual elements of different series,
                on a plot that uses the second color axis.
            </c:documentation>
        </c:property>
        
        <c:property name="plot2ColorAxis" type="number" default="1" category="Style">
            <c:documentation>
                Indicates that the data shown in the second plot should
                use a separate color scheme, 
                as specified in <c:link to="#secondAxisColor" />.
                
                Valid values are <tt>1</tt> and <tt>2</tt>.
            </c:documentation>
        </c:property>
        
        <c:property name="extensionPoints" type="pvc.options.ext.ChartCommonExtensionPoints" category="Style">
            <c:documentation>
                The extension points object 
                contains style definitions for 
                various visual elements of the chart.
            </c:documentation>
        </c:property>
    </c:complexType>
    
    <c:complexType name="CartesianChartCommonOptions" 
                   space="pvc.options"
                   base="pvc.options.ChartCommonOptions" 
                   abstract="true">
        <c:documentation>
            The common options documentation class for the <b>Cartesian</b> charts.
        </c:documentation>
        
        <c:property name="extensionPoints" type="pvc.options.ext.CartesianChartCommonExtensionPoints" category="Style">
            <c:documentation>
                The extension points object 
                contains style definitions for 
                various visual elements of the cartesian charts.
            </c:documentation>
        </c:property>
        
        <c:property name="visualRoles" type="pvc.options.roles.CartesianCommonVisualRoles" category="Data Binding">
            <c:documentation>
                The options of visual roles that are common to (almost) all cartesian chart types.
            </c:documentation>
        </c:property>
    </c:complexType>
    
    <c:complexType name="CategoricalChartCommonOptions" 
                   space="pvc.options"
                   base="pvc.options.CartesianChartCommonOptions" 
                   abstract="true">
        <c:documentation>
            The common options documentation class for the <b>Categorical</b> charts. 
        </c:documentation>
        
        <!-- Roles -->
        <c:property name="visualRoles" type="pvc.options.roles.CategoricalCommonVisualRoles" category="Data Binding">
            <c:documentation>
                The options of visual roles that are common to all categorical chart types.
            </c:documentation>
        </c:property>
        
    </c:complexType>
    
    <c:complexType name="BarChartCommonOptions" 
                   space="pvc.options"
                   base="pvc.options.CategoricalChartCommonOptions" 
                   abstract="true">
        <c:documentation>
            The common options documentation class of the <b>Bar family</b> charts.
        </c:documentation>
        <c:property name="panelSizeRatio" type="number" default="0.9" category="Layout">
            <c:documentation>
             Percentage of occupied space over total space 
             in a discrete axis band.
             
             The remaining space will be of 
             margins between bands.
            </c:documentation>
        </c:property>
    </c:complexType>
    
    <c:complexType name="BarChartOptions" 
                   space="pvc.options"
                   base="pvc.options.BarChartCommonOptions">
        <c:documentation>
            The options documentation class of the <b>Bar</b> chart class: <c:link to="pvc.BarChart" />.
        </c:documentation>
    </c:complexType>
    
    <c:complexType name="NormalizedBarChartOptions" 
                   space="pvc.options"
                   base="pvc.options.BarChartCommonOptions">
        <c:documentation>
            The options documentation class of the <b>Normalized Bar</b> chart class: <c:link to="pvc.NormalizedBarChart" />.
        </c:documentation>
    </c:complexType>
    
    <c:complexType name="WaterfallChartOptions" 
                   space="pvc.options"
                   base="pvc.options.BarChartCommonOptions">
        <c:documentation>
            The options documentation class of the <b>Waterfall</b> chart class: <c:link to="pvc.WaterfallChart" />.
        </c:documentation>
    </c:complexType>
    
    <c:complexType name="BoxplotChartOptions" 
                   space="pvc.options"
                   base="pvc.options.BarChartCommonOptions">
        <c:documentation>
            The options documentation class of the <b>Box plot</b> chart class: <c:link to="pvc.BoxplotChart" />.
        </c:documentation>
    </c:complexType>
    
    <c:complexType name="HeatGridChartOptions" 
                   space="pvc.options"
                   base="pvc.options.CategoricalChartCommonOptions">
        <c:documentation>
            The options documentation class of the <b>Heat grid</b> chart class: <c:link to="pvc.HeatGridChart" />.
        </c:documentation>
    </c:complexType>
    
    
    <c:complexType name="PointChartCommonOptions" 
                   space="pvc.options" 
                   base="pvc.options.CategoricalChartCommonOptions"
                   abstract="true">
        <c:documentation>
            The common options documentation class for the <b>Line/Dot/Area family</b> charts.
        </c:documentation>
    </c:complexType>
    
    <c:complexType name="LineChartOptions" 
                   space="pvc.options"
                   base="pvc.options.PointChartCommonOptions">
        <c:documentation>
            The options documentation class of the <b>Line</b> chart class: <c:link to="pvc.LineChart" />.
        </c:documentation>
    </c:complexType>
    
    <c:complexType name="DotChartOptions" 
                   space="pvc.options"
                   base="pvc.options.PointChartCommonOptions">
        <c:documentation>
            The options documentation class of the <b>Dot</b> chart class: <c:link to="pvc.DotChart" />.
        </c:documentation>
    </c:complexType>
    
    <c:complexType name="AreaChartOptions" 
                   space="pvc.options"
                   base="pvc.options.PointChartCommonOptions">
        <c:documentation>
            The options documentation class of the <b>Area</b> chart class: <c:link to="pvc.AreaChart" />.
        </c:documentation>
    </c:complexType>
    
    
    <c:complexType name="StackedLineChartOptions" 
                   space="pvc.options"
                   base="pvc.options.PointChartCommonOptions">
        <c:documentation>
            The options documentation class of the <b>Stacked Line</b> chart class: <c:link to="pvc.StackedLineChart" />.
        </c:documentation>
    </c:complexType>
    
    <c:complexType name="StackedAreaChartOptions" 
                   space="pvc.options"
                   base="pvc.options.PointChartCommonOptions">
        <c:documentation>
            The options documentation class of the <b>Stacked Area</b> chart class: <c:link to="pvc.StackedAreaChart" />.
        </c:documentation>
    </c:complexType>
    
    
    <c:complexType name="MetricPointChartCommonOptions" 
                   space="pvc.options" 
                   base="pvc.options.CartesianChartCommonOptions"
                   abstract="true">
        <c:documentation>
            The common options documentation class for the <b>Metric Line/Dot family</b> charts.
        </c:documentation>
    </c:complexType>
    
    <c:complexType name="MetricLineChartOptions" 
                   space="pvc.options"
                   base="pvc.options.MetricPointChartCommonOptions">
        <c:documentation>
            The options documentation class of the <b>Metric Line</b> chart class: <c:link to="pvc.MetricLineChart" />.
        </c:documentation>
    </c:complexType>
    
    <c:complexType name="MetricDotChartOptions" 
                   space="pvc.options"
                   base="pvc.options.MetricPointChartCommonOptions">
        <c:documentation>
            The options documentation class of the <b>Metric Dot (XY Scatter)</b> chart class: <c:link to="pvc.MetricDotChart" />.
        </c:documentation>
    </c:complexType>
    
    <c:complexType name="BulletChart" 
                   space="pvc.options"
                   base="pvc.options.ChartCommonOptions">
        <c:documentation>
            The options documentation class of the <b>Bullet</b> chart class: <c:link to="pvc.BulletChart" />.
        </c:documentation>
    </c:complexType>
    
    <!-- COMPLEX TYPES - PANELS -->
    
    <c:complexType name="CommonPanelOptions" space="pvc.options.panels">
        <c:documentation>
            The common options documentation class of the CCC panels.
        </c:documentation>
    </c:complexType>
    
    <c:complexType name="CommonDockedPanelOptions" space="pvc.options.panels" base="pvc.options.panels.CommonPanelOptions">
        <c:documentation>
            The common options documentation class of CCC docked panels.
        </c:documentation>
        
        <!--
        offset // not documented
         -->
         
        <c:property name="position" 
                     type="pvc.options.varia.DockPosition"
                     category="Layout">
            <c:documentation>
                The docking position of the panel.
            </c:documentation>
        </c:property>
        
        <c:property name="align" 
                     type="pvc.options.varia.AlignmentSource"
                     category="Layout">
            <c:documentation>
                The alignment side of the panel (the source)
                that will align to a side of the parent panel (the target).
                
                The alignment side must be 
                orthogonal to the docking side.
                
                The default value is <tt>'middle'</tt>,
                if <c:link to="pvc.options.panels.CommonDockedPanelOptions#position" />
                is an horizontal side, 
                and <tt>'center'</tt>, otherwise.
            </c:documentation>
        </c:property>
        
        <c:property name="alignTo" 
                     type="number string pvc.options.varia.AlignmentTarget"
                     category="Layout">
            <c:documentation>
                The alignment side or position 
                of the parent panel (the target)
                that will align with the alignment side of this panel,
                the source.
                
                The default value is the value of 
                <c:link to="pvc.options.panels.CommonDockedPanelOptions#align" />.
                
                See <c:link to="pvc.options.varia.AlignmentTarget" />
                for information on supported data types.
            </c:documentation>
        </c:property>
        
        <c:property name="keepInBounds" type="boolean" default="false" category="Layout">
            <c:documentation>
                Indicates if the layout should try that the
                panel be kept inside its parent,
                by changing its position.
            </c:documentation>
        </c:property>
        
        <c:property name="margins" type="number string pvc.options.varia.Sides" default="0" category="Layout">
            <c:documentation>
                The margins of the panel.
                
                See <c:link to="pvc.options.varia.Sides" /> for information about 
                the different supported data types.
            </c:documentation>
        </c:property>
        
        <c:property name="paddings" type="number string pvc.options.varia.Sides" default="0" category="Layout">
            <c:documentation>
                The paddings of the panel.
                
                See <c:link to="pvc.options.varia.Sides" /> for information about 
                the different supported data types.
            </c:documentation>
        </c:property>
    
        <c:property name="font" type="string" category="Style">
            <c:documentation>
                The font of the panel.
                
                See the supported font format in 
                <c:link to="http://www.w3.org/TR/CSS2/fonts.html#font-shorthand" />
            </c:documentation>
        </c:property>

        <c:property name="size" type="number string pvc.options.varia.Size" category="Layout">
            <c:documentation>
                The fixed size of the panel.
                
                See <c:link to="pvc.options.varia.Size" /> for information about 
                the different supported data types.
            </c:documentation>
        </c:property>
        
        <c:property name="sizeMax" type="number string pvc.options.varia.Size" category="Layout">
            <c:documentation>
                The maximum size of the panel.
                
                See <c:link to="pvc.options.varia.Size" /> for information about 
                the different supported data types.
            </c:documentation>
        </c:property>
        
    </c:complexType>
    
    <c:complexType name="ChartTitlePanelOptions" 
                   space="pvc.options.panels" 
                   base="pvc.options.panels.CommonDockedPanelOptions">
        <c:documentation>
            The options documentation class of the CCC title panel.
            
            The default 
            <c:link to="pvc.options.panels.CommonDockedPanelOptions#position" />
            is <tt>'top'</tt>.
            
            The default 
            <c:link to="pvc.options.panels.CommonDockedPanelOptions#font" />
            is <tt>'14px sans-serif'</tt>.
        </c:documentation>
        
        <!--
        titleOffset // not documented
         -->
         
         <c:property name="extensionPoints" type="pvc.options.ext.ChartTitlePanelExtensionPoints" category="Style">
            <c:documentation>
                The extension points provided by the chart title panel.
            </c:documentation>
         </c:property>
    </c:complexType>
    
    <c:complexType name="LegendPanelOptions" 
                   space="pvc.options.panels" 
                   base="pvc.options.panels.CommonDockedPanelOptions">
        <c:documentation>
            The options documentation class of the CCC legend panel.
            
            The default 
            <c:link to="pvc.options.panels.CommonDockedPanelOptions#position" />
            is <tt>'bottom'</tt>.
            
            The default 
            <c:link to="pvc.options.panels.CommonDockedPanelOptions#font" />
            is <tt>'10px sans-serif'</tt>.
            
            The default
            <c:link to="pvc.options.panels.CommonDockedPanelOptions#paddings" />
            is <tt>5</tt> pixels.
        </c:documentation>
        
        <c:property name="textMargin" type="number" default="6" category="Layout">
            <c:documentation>
                The space between the marker and the associated label, in pixel units.
            </c:documentation>
        </c:property>
        
        <c:property name="itemPadding" type="number" default="2.5" category="Layout">
            <c:documentation>
                Half the space between legend items, in pixel units.
            </c:documentation>
        </c:property>
        
        <c:property name="markerSize" type="number" default="15" category="Layout">
            <c:documentation>
                The width and height of the marker panel.
                
                The marker itself will be slightly smaller.
            </c:documentation>
        </c:property>
        
        <c:property name="drawLine" type="boolean" category="Style">
            <c:documentation>
                Forces a rule to be shown or not in the marker zone.
                
                The default value depends on the chart type.
            </c:documentation>
        </c:property>
        
        <c:property name="drawMarker" type="boolean" category="Style">
            <c:documentation>
                Forces a shape to be shown or not in the marker zone.
                
                The default value depends on the chart type.
            </c:documentation>
        </c:property>

        <c:property name="shape" type="pvc.options.varia.ShapeType" category="Style">
            <c:documentation>
                Forces a given shape to be used in the marker zone.
                
                The default value depends on the chart type.
            </c:documentation>
        </c:property>
        
        <c:property name="clickMode" type="pvc.options.varia.LegendClickMode" default="'toggleVisible'" category="Style">
            <c:documentation>
                What happens when the user clicks a legend item. 
            </c:documentation>
        </c:property>
        
        <c:property name="extensionPoints" type="pvc.options.ext.LegendPanelExtensionPoints" category="Style">
            <c:documentation>
                The extension points provided by the legend panel.
            </c:documentation>
         </c:property>
    </c:complexType>
    
    
    <!-- COMPLEX TYPES - AUXILIAR -->
    
    <c:complexType name="TooltipOptions" space="pvc.options.varia">
        <c:documentation>
            The options documentation class of the tooltip. TODO
        </c:documentation>
    </c:complexType>
    
    <c:complexType name="DimensionTypeOptions" space="pvc.options.varia">
        <c:documentation>
            The options documentation class of a dimension type.
        </c:documentation>
        <c:property name="label" type="string" category="Presentation">
            <c:documentation>
                The name of the dimension type as it is shown to the user.
                
                The label <i>should</i> be unique.

                The default value is built from the dimension name,
                by converting the first character to upper case.
            </c:documentation>
        </c:property>
        <c:property name="valueType" type="pvc.options.varia.DimensionValueType" default="null" category="Data">
            <c:documentation>
                The type of value that dimensions of this type will hold.
            </c:documentation>
        </c:property>
        <c:property name="isDiscrete" type="boolean" category="Data">
            <c:documentation>
                Indicates if a dimension type should be considered discrete
                or continuous.
                
                Only dimension types whose <c:link to="#valueType" /> 
                is one of 
                <c:link to="pvc.options.varia.DimensionValueType#Number" /> or
                <c:link to="pvc.options.varia.DimensionValueType#Date" />
                can be continuous.
                
                Some chart types support binding 
                a continuous or a discrete dimension to a visual role,
                yielding different visual results.
                An example is the "color" visual role of the Metric Line/Dot charts.
                Another example is the Line/Dot/Area chart that supports
                both a continuous or a discrete dimension in its "category" visual role.  
                
                The default value dependends on the value of <c:link to="#valueType" />.
                If it can be continuous, then the default value is <tt>false</tt>.
                If it cannot, the default value is <tt>true</tt>.
            </c:documentation>
        </c:property>
        
        <c:property name="converter" type="pvc.options.varia.DimensionConverter" category="Data">
            <c:documentation>
                Converts a non-null raw value, 
                as read from the data source,
                into a value of the dimension's <c:link to="#valueType" />.
                
                The returned value 
                need not have the type of the dimension's value type.
                But it t must be such that the 
                specific value type cast function
                is able to convert it to the dimension's value type.
                In this way, 
                only "non-standard" conversions
                need to be handled with a converter function.
                
                Values that are not convertible by the dimension's value type 
                cast function become null.
                
                Also, note that the only value type that 
                does not have a cast function is the  
                <c:link to="pvc.options.varia.DimensionValueType#Any" />.
                
                When unspecified and 
                the value type is <c:link to="pvc.options.varia.DimensionValueType#Date" />,
                and the option <c:link to="#rawFormat" /> is specified
                a default converter is created for it. 
            </c:documentation>
        </c:property>
        <c:property name="rawFormat" type="string" category="Data">
            <c:documentation>
                A protovis format string that is to parse the raw value.
                
                Currently, this option is ignored unless the 
                option <c:link to="#converter" /> is unspecified
                and the value type is 
                <c:link to="pvc.options.varia.DimensionValueType#Date" />.
                
                When the chart option 
                <c:link to="pvc.options.ChartCommonOptions#timeSeriesFormat" />,
                is specified,
                and the value type is 
                <c:link to="pvc.options.varia.DimensionValueType#Date" />,
                it is taken as the <i>default value</i> of this option.
                
                A converter function is created to parse
                raw values with the specified format string.
            </c:documentation>
        </c:property>
        <c:property name="key" type="pvc.options.varia.DimensionKey" category="Data">
            <c:documentation>
                A function that converts a non-null value of the dimension's 
	            <c:link to="pvc.options.varia.DimensionTypeOptions#valueType" />
	            into a string that (uniquely) identifies
	            the value in the dimension.
	            
	            The default key function is 
	            the standard JavaScript <tt>String</tt> function,
	            and is suitable for most value types.
	            
	            If the dimension's value type is one of 
	            <c:link to="pvc.options.varia.DimensionValueType#Any" /> or
	            <c:link to="pvc.options.varia.DimensionValueType#Object" />
	            the <tt>String</tt> function may not be suitable to 
	            identify the values.
	            
	            If more than one value has a given key,
	            only the first one will be stored in the dimension.
            </c:documentation>
        </c:property>
        <c:property name="comparer" type="pvc.options.varia.DimensionComparer" category="Data">
            <c:documentation>
                A function that compares two different and non-null values of the dimension's 
                <c:link to="pvc.options.varia.DimensionTypeOptions#valueType" />.
                
                When unspecified, 
                and the dimension type is not <c:link to="#isDiscrete" />,
                a default natural order comparer function
                is applied to the continuous value types:
                <c:link to="pvc.options.varia.DimensionValueType#Number" /> and
                <c:link to="pvc.options.varia.DimensionValueType#Date" />.
                
                Dimension types that do not have a comparer 
                function "compare" their values by "input order" 
                - order of first appearence, in the data source.
            </c:documentation>
        </c:property>
        
        <c:property name="formatter" type="pvc.options.varia.DimensionFormatter" category="Presentation">
            <c:documentation>
                A function that formats a value, 
                possibly null, 
                of the dimension's 
                <c:link to="pvc.options.varia.DimensionTypeOptions#valueType" />.
                
                Note that, the chart option 
                <c:link to="pvc.options.ChartCommonOptions#valueFormat" />,
                is used to build a default formatter function 
                for numeric dimensions of the "value" dimension group.
                
                When unspecified and 
                the value type is <c:link to="pvc.options.varia.DimensionValueType#Number" />,
                a default formatter is created that formats numbers with two decimal places.
                
                When unspecified and 
                the value type is <c:link to="pvc.options.varia.DimensionValueType#Date" />,
                and the option <c:link to="#format" /> is specified (or implied)
                a default formatter is created for it.
                
                Otherwise a value is formatted by calling 
                the standard JavaScript <tt>String</tt> function on it.
            </c:documentation>
        </c:property>
        <c:property name="format" type="string" category="Presentation">
            <c:documentation>
                A protovis format string that is to format a value of 
                the dimension's 
                <c:link to="pvc.options.varia.DimensionTypeOptions#valueType" />.
                
                Currently, this option is ignored unless the 
                option <c:link to="#formatter" /> is unspecified
                and the value type is 
                <c:link to="pvc.options.varia.DimensionValueType#Date" />.
                
                When unspecified, 
                but the option <c:link to="#rawFormat" /> is specified,
                a format string is created from the later 
                (simply by replacing "-" with "/").
                
                A formatter function is created to format
                values with the specified or implied format string.
            </c:documentation>
        </c:property>
        
        <c:property name="isHidden" type="boolean" default="false" category="Presentation">
            <c:documentation>
                Indicates if values of this dimension type 
                should be hidden from the user.
                
                This option is useful to hide auxiliar dimensions that are used to:
                <ul> 
                    <li>hold extra data, required for drill-down purposes</li>
                    <li>
                        complete the minimal working information a chart needs to work, 
                        like, for example, 
                        a "series" dimension created automatically by a chart if 
                        its required "series" visual role was not unbound
                    </li>
                </ul>
                
                The only place where the values of a dimension that is not bound to a visual role
                are shown to the user is the tooltip, as it is formatted by default.
                To prevent this, 
                set the dimension type's <tt>isHidden</tt> option to <tt>true</tt>.
            </c:documentation>
        </c:property>
        
    </c:complexType>
    
    <c:complexType name="DimensionsReaderOptions" space="pvc.options.varia">
        <c:documentation>
            The options documentation class of a data dimensions reader.
            
            A dimensions reader is executed for each row of a 
            data source to convert values of one or more columns
            into one or more atoms of certain dimensions.
            
            Together, a set of dimensions readers, 
            are executed to fully convert 
            each data source row into atoms of the defined dimension types. 
            The atoms of each row are used to construct a datum.
            
            The mentioned data source row is called the "virtual item".
            Depending on the data source format the actual rows 
            carry different informaton. 
            The virtual item is a normalized view of each row of the data source,
            independent of its format.
            
            A dimensions reader can be configured in the following ways:
            <dl>
                <dt>specify <tt>names</tt> but not <tt>reader</tt></dt>
                <dd>
                    names are paired with any specified indexes, from left to right;
                    excess indexes feed dimensions whose name starts with the last specified name (a dimension group);
                    excess names are fed with the <i>non reserved</i>indexes 
                    that follow the last specified index (or 0, if none);
                    indexes explicitly specified in dimensions readers are all
                    reserved beforehand
                </dd>
                <dt>specify <tt>indexes</tt> but not <tt>names</tt> and <tt>reader</tt></dt>
                <dd>
                    the specified indexes become reserved but are not read,
                    and so are effectively ignored 
                </dd>
                <dt>specify both <tt>reader</tt> and <tt>names</tt></dt>
                <dd>
                    any specified indexes are reserved,
                    and no pairing is performed between these and the specified names;
                    the reader function may 
                    read any cell from the virtual item and 
                    return atoms from any of the dimensions specified in <tt>names</tt>;
                    atoms of stated dimensions, that are not returned, 
                    result in a <i>null</i> value;
                    this form allows, for example,
                    splitting a value in the virtual item into two dimensions.
                </dd>
            </dl>
        </c:documentation>
        
        <c:property name="names" type="string list(string)" category="General">
            <c:documentation>
                The name or names of the dimensions that the reader reads
                from each virtual item.
                
                When the argument is a string, it can be a list of names, 
                separated by the character ",".
                
                Only one dimensions reader can read a given dimension.
            </c:documentation> 
        </c:property>
        
        <c:property name="indexes" type="number string list(number string)" category="General">
            <c:documentation>
	            The index or indexes, of each virtual item, 
	            that are to be read.
	            
	            Only one dimensions reader can state that it reads a given index
	            (although a dimensions reader function may read any cells,
	             stated or not).
            </c:documentation>
        </c:property>
        
        <c:property name="reader" type="pvc.options.varia.DimensionsReader" category="General">
            <c:documentation>
                A dimensions reader function, 
                reads atoms from a virtual item row.
                
                When unspecified, one is created that performs a simple 
                mapping between the specified names and indexes.
                 
	            A dimensions reader function can be specified 
	            to perform non-simple operations over the read cells, 
	            like the following:
	            <ul>
	                <li>
	                    combine values from two or more cells into a single dimension,
	                </li>
	                <li>
                        split the value of one cell into more than one dimension,
                    </li>
	                <li>
	                   feed a dimension with correlated data read from an external data source.
	                </li>
	            </ul>
	            
	            Dimensions reader functions need not be specifed to perform
	            conversion or formatting operations of a single cell.
	            For those cases, the dimension type's 
	            <c:link to="pvc.options.varia.DimensionTypeOptions#converter" />
	            and 
	            <c:link to="pvc.options.varia.DimensionTypeOptions#formatter" />
	            should be used instead.
	            
	            The function may read cells whose indexes were not
	            "reserved" in <tt>indexes</tt>. 
	            Those cells might be read by other readers,
	            possibly default ones created by the translator.
            </c:documentation> 
        </c:property>
    </c:complexType>
    
    <c:complexType name="VisualRoleOptions" space="pvc.options.varia">
        <c:documentation>
            The options documentation class of a visual role.
            
            Where a visual role argument is expected, 
            a <tt>string</tt> value is also accepted,
            with the content of what would be specified in
            the property <c:link to="#dimensions" />.
        </c:documentation>
        <c:property name="dimensions" type="string">
            <c:documentation>
                A list of dimension names and respective 
                sort orders.
                
                A dimensions string is similar to an SQL 'order by' clause,
                like the following examples show:
                <dl>
                    <dt>
                        <tt>"productType"</tt>
                    </dt>
                    <dd>
                        the visual role is bound to the single dimension named <tt>"productType"</tt>,
                        and data will be sorted in ascending order
                    </dd>
                </dl>
                <dl>
                    <dt>
                        <tt>"sales"</tt>
                    </dt>
                    <dd>
                        the visual role is bound to the single dimension named <tt>"sales"</tt>,
                        and data will be sorted in ascending order
                    </dd>
                </dl>
                <dl>
                    <dt>
                        <tt>"country, productType"</tt>
                    </dt>
                    <dd>
                        the visual role is bound to the dimensions 
                        named <tt>"country"</tt> and <tt>"productType"</tt>,
                        and data will be sorted first by
                        <tt>"country"</tt>, in ascending order,
                        and then by 
                        <tt>"productType"</tt>, in ascending order
                    </dd>
                </dl>
                <dl>
                    <dt>
                        <tt>"country desc, productType asc"</tt>
                    </dt>
                    <dd>
                        the visual role is bound to the dimensions 
                        named <tt>"country"</tt> and <tt>"productType"</tt>,
                        and data will be sorted first by
                        <tt>"country"</tt>, in descending order,
                        and then by 
                        <tt>"productType"</tt>, in ascending order
                    </dd>
                </dl>
            </c:documentation>
        </c:property>
        
        <c:property name="isReversed" type="boolean" default="false">
            <c:documentation>
                Indicates that the visual role's data 
                should be ordered in reverse order
                in relation to the sort orders specified in
                <c:link to="#dimensions" />.
                
                This option provides a quick way to reverse the order
                of the whole visual role, without changing any partial
                sort orders assigned to each dimension of the visual role.
                
                This option can be used to reverse the order of 
                the data that is shown in an axis.
            </c:documentation>
        </c:property>
    </c:complexType>
    
    <c:complexType name="Sides" space="pvc.options.varia">
        <c:documentation>
            Describes the distances from 
            each of the four planar sides:
            "left", "right", "top" and "bottom".
            
            It is used to describe the margins and the paddings of panels.
            
            It is possible to specify any combination of the side properties.
            
            All side properties support values in absolute or relative units:
            <dl>
                <dt>absolute</dt>
                <dd>
                    if it is a <tt>number</tt> or a numeric <tt>string</tt>,
                    the measure is in pixel units
                </dd>
                
                <dt>relative</dt>
                <dd>
                    if it is a numeric <tt>string</tt> with a "%" suffix,
                    the measure is a percentage of some reference size;
                    usually, the reference size is 
                    the size of the corresponding container panel side
                    ("width" if side is "left" or "right", or "height" otherwise) 
                </dd>
            </dl>
            
            The special property, <tt>all</tt>, affects all unspecified properties at once. 
            
            <c:example>
                The following is an example of a <i>sides</i>-structured object,
                the hypothetical margins of a legend panel:
                <pre>
                var legendMargins = {left: 10, right: '20', all: '15%'};
                </pre> 
                It says that 
                the left margin has 10 pixels, 
                the right margin has 20 pixels, and 
                the top and bottom margins have each 
                    the size of 15 percent of the legend panel's height.
            </c:example>
            
            <h3>Single number or numeric string interpretation</h3>
            All chart options of type <c:link to="pvc.options.varia.Sides" /> 
            allow specifying
            a <tt>number</tt> or 
            a <tt>string</tt> of a single number, possibly followed by a "%" sign, 
            instead of the JSON form,
            as meaning <i>all</i> properties.
            
            <!-- 
            The interpretation of what the number or percentage stand 
            for depends on the specific option. 
            In the legend and title panels, for example, 
            it is interpreted means the 
             -->
            <h3>String syntax</h3>
            All chart options of type <c:link to="pvc.options.varia.Sides" /> 
            also allow specifying a CSS2-like margins string, 
            <c:link to="http://www.w3.org/TR/CSS21/box.html#propdef-margin" />.
            <c:example>
                The following shows the equivalence between the string and JSON syntax:
                <pre>
                var margins1 = '1';       // {all: '1'}
                var margins2 = '1 2';     // {top: '1', bottom: '1', right: '2', left: '2'}
                var margins3 = '1 2 3';   // {top: '1', bottom: '3', right: '2', left: '2'}
                var margins4 = '1 2 3 4'; // {top: '1', bottom: '3', right: '2', left: '4'}
                </pre>
            </c:example>
        </c:documentation>
        <c:property name="all"    type="number string" />
        <c:property name="left"   type="number string" />
        <c:property name="right"  type="number string" />
        <c:property name="top"    type="number string" />
        <c:property name="bottom" type="number string" />
    </c:complexType>
    
    <c:complexType name="Size" space="pvc.options.varia">
        <c:documentation>
            Describes the size 
            of the horizontal and vertical dimensions
            of an axis aligned box.
            It is used to describe the margins and the paddings of panels.
            
            It is possible to specify any combination of the size properties.
            
            All size properties support values in absolute or relative units:
            <dl>
                <dt>absolute</dt>
                <dd>
                    if it is a <tt>number</tt> or a numeric <tt>string</tt>,
                    the measure is in pixel units
                </dd>
                
                <dt>relative</dt>
                <dd>
                    if it is a numeric <tt>string</tt> with a "%" suffix,
                    the measure is a percentage of some reference size;
                    usually, 
                    the reference size is 
                    the container panel's corresponding size
                </dd>
            </dl>
            
            The special property, <tt>all</tt>, affects all unspecified properties at once. 
            
            <c:example>
                The following is an example of a <i>size</i>-structured object,
                the hypothetical size of a title panel:
                <pre>
                var titleSize = {width: '80%', all: 100};
                </pre> 
                It says that 
                the height has 100 pixels, 
                and that the width is 80 percent of the base panel's width.
            </c:example>
            
            <h3>Single number or numeric string interpretation</h3>
            All chart options of type <c:link to="pvc.options.varia.Size" /> 
            allow specifying
            a <tt>number</tt> or 
            a <tt>string</tt> of a single number, possibly followed by a "%" sign, 
            instead of the JSON form.
            //as meaning <i>all</i> properties.
            
            The interpretation of what the number or percentage stand 
            for depends on the specific option. 
            In the legend and title panels, for example, 
            it is the size of the dimension orthogonal to the anchored to side.
            So if a legend is anchored to the <tt>'left'</tt> side,
            the number or percentage is the legend's width.  
             
            <h3>String syntax</h3>
            All chart options of type <c:link to="pvc.options.varia.Size" /> 
            also allow specifying a string with a fixed structure.
            <c:example>
                The following shows the equivalence between the string and JSON syntax:
                <pre>
                var size1 = '1';   // {all: '1'}
                var size2 = '1 2'; // {width: '1', height: '2'}
                </pre>
            </c:example>
        </c:documentation>
        
        <c:property name="all"    type="number string" />
        <c:property name="width"  type="number string" />
        <c:property name="height" type="number string" />
    </c:complexType>
    
    <!-- COMPLEX TYPES - VISUAL ROLES -->
    <c:complexType name="ChartCommonVisualRoles" space="pvc.options.roles">
        <c:documentation>
            The visual roles common to all chart types.
        </c:documentation>
        <c:property name="multiChart" type="string pvc.options.varia.VisualRoleOptions">
            <c:documentation>
                The <tt>multiChart</tt> visual role
                allows turning a chart in a small multiples chart
                <c:link to="http://en.wikipedia.org/wiki/Small_multiple" />.
                
                All main chart types support being shown
                as a small multiples chart.
                The exceptions are the charts: 
                <i>Heat Grid</i>, 
                <i>Bullet</i>, 
                <i>Data Tree</i> and
                <i>Parallel Coordinates</i>.
                
                The <tt>multiChart</tt> visual role
                can be bound to any number of dimensions,
                that are, or will be turned into, discrete.
                
                The <tt>multiChart</tt> visual role automatically binds to 
                every dimension whose name has the <tt>multiChart</tt> prefix.
                
                One <i>small</i> chart is generated per
                unique combination of the values of the bound dimensions
                that is present in the source data.
                Each small chart then receives as its data
                the partition of the source data that shares its 
                unique combination of values.
                
                See <c:link to="pvc.options.varia.VisualRoleOptions" />
                for more information on supported data types.
            </c:documentation>
        </c:property>
    </c:complexType>
    
    <c:complexType name="CartesianCommonVisualRoles" space="pvc.options.roles" base="pvc.options.roles.ChartCommonVisualRoles">
        <c:documentation>
            The visual roles common to (almost) all cartesian chart types.
        </c:documentation>
        <c:property name="series" type="string pvc.options.varia.VisualRoleOptions">
            <c:documentation>
                The <tt>series</tt> visual role represents a 
                <i>series</i> of connected data points.
                
                Most cartesian charts show the connectedness
                of data points of a given series in some way, 
                by connecting points with a line,
                by giving them all the same color,
                or, simply, 
                by the order in which they are drawn,
                and when overlapped, some stay on top of others.
                
                The <tt>series</tt> visual role automatically binds to 
                every dimension whose name has the <tt>series</tt> prefix.
                
                The visual role itself is optional,
                yet, when unbound, 
                a dimension with a "series" prefix
                is automatically created for it,
                and all datums will have the value <tt>null</tt>
                in that dimension.
                
                The only cartesian chart type that 
                does not support the <tt>series</tt> visual role is 
                the <i>Box Plot</i>.
                
                See <c:link to="pvc.options.varia.VisualRoleOptions" />
                for more information on supported data types.
            </c:documentation>
        </c:property>
    </c:complexType>
    
    <c:complexType name="CategoricalCommonVisualRoles" space="pvc.options.roles" base="pvc.options.roles.CartesianCommonVisualRoles">
        <c:documentation>
            The visual roles common to all categorical chart types.
        </c:documentation>
        <c:property name="category" type="string pvc.options.varia.VisualRoleOptions">
            <c:documentation>
                The <tt>category</tt> visual role 
                represents a certain <i>logical grouping</i> of the data points.
                
                Category data may be discrete or continuous.
                The relevant characteristic is that 
                data with equal category values is grouped and 
                summarized in some way.
                
                So,
                if more that one data point exists for a given 
                series and category values combination,
                nevertheless, 
                only one visual element is generated for the whole group.
                
                Some chart types support 
                showing continuous category types, in a continuous scale. 
                Others, 
                turn continuous dimension types bound to the <tt>category</tt>
                visual role into discrete dimension types, 
                and then show the continuous categories in a discrete scale.
                
                The <tt>category</tt> visual role automatically binds to 
                every dimension whose name has the <tt>category</tt> prefix.
                
                The visual role itself is optional,
                yet, when unbound, 
                a dimension with a "category" prefix
                is automatically created for it,
                and all datums will have the value <tt>null</tt>
                in that dimension.
                
                See <c:link to="pvc.options.varia.VisualRoleOptions" />
                for more information on supported data types.
            </c:documentation>
        </c:property>
    </c:complexType>
    
    <!-- COMPLEX TYPES - CHART/PANEL EXTENSION POINTS -->
    <!-- scale is undocummented -->
    <c:complexType name="ChartCommonExtensionPoints" space="pvc.options.ext">
        <c:documentation>
            The extension points common to all chart types.
            
            To use an extension point you must find its full name: 
            join the prefix property name, 
            like <c:link to="#base" />,
            with one of the properties of the type of the extension point,
            like <c:link to="pvc.options.marks.PanelExtensionPoint#overflow" />,
            with an "_" character in between,
            and obtain the name <tt>base_overflow</tt>.
        </c:documentation>
        
        <c:property name="base" type="pvc.options.marks.PanelExtensionPoint">
            <c:documentation>
                The extension point of the base (root) panel of the <i>root</i> chart.
            </c:documentation>
        </c:property>
        
        <c:property name="smallBase" type="pvc.options.marks.PanelExtensionPoint">
            <c:documentation>
                The extension point of the base (root) panel of the <i>small</i> charts.
            </c:documentation>
        </c:property>
        
        <c:property name="content" type="pvc.options.marks.PanelExtensionPoint">
            <c:documentation>
                The extension point of the content panel of the <i>root</i> chart.
                
                The content panel is a child of the base panel.
            </c:documentation>
        </c:property>
        
        <c:property name="smallContent" type="pvc.options.marks.PanelExtensionPoint">
            <c:documentation>
                The extension point of the content panel of the <i>small</i> charts.
                
                The content panel is a child of the base panel.
            </c:documentation>
        </c:property>
        
        <c:property name="plot" type="pvc.options.marks.PanelExtensionPoint">
            <c:documentation>
                The extension point of the plot panel of the charts.
                
                The plot panel is a child of the content panel.
            </c:documentation>
        </c:property>
        
        <c:property name="chart" type="pvc.options.marks.PanelExtensionPoint">
            <c:documentation>
                <c:deprecated>
                    Please use the extension point <c:link to="#plot" /> instead. 
                </c:deprecated>
                The extension point of the plot panel of the charts.
                
                The plot panel is a child of the content panel.
            </c:documentation>
        </c:property>
    </c:complexType>
    
    <c:complexType name="CartesianChartCommonExtensionPoints" space="pvc.options.ext" base="pvc.options.ext.ChartCommonExtensionPoints">
        <c:documentation>
            The extension points common to all cartesian chart types.
        </c:documentation>
        
        <c:property name="xAxisGrid" type="pvc.options.marks.RuleExtensionPoint">
            <c:documentation>
                The extension point of the grid line rules that are drawn 
                one per major tick of the <ii>XX</ii> axis 
                (an horizontal axis has vertical grid line rules).
            </c:documentation>
        </c:property>
        
        <c:property name="yAxisGrid" type="pvc.options.marks.RuleExtensionPoint">
            <c:documentation>
                The extension point of the grid line rules that are drawn 
                one per major tick of the <ii>YY</ii> axis 
                (a vertical axis has horizontal grid line rules).
            </c:documentation>
        </c:property>
        
        <c:property name="xAxisZeroLine" type="pvc.options.marks.RuleExtensionPoint">
            <c:documentation>
                The extension point of the zero line rule that is drawn 
                on the 0-valued tick, when there is one 
                (an horizontal axis has a vertical zero line rule).
            </c:documentation>
        </c:property>
        
        <c:property name="yAxisZeroLine" type="pvc.options.marks.RuleExtensionPoint">
            <c:documentation>
                The extension point of the zero line rule that is drawn 
                on the 0-valued tick, when there is one 
                (a vertical axis has an horizontal zero line rule).
            </c:documentation>
        </c:property>
    </c:complexType>
    
    <c:complexType name="ChartTitlePanelExtensionPoints" space="pvc.options.ext">
        <c:documentation>
            The extension points of the chart title panel.
            
            To use an extension point you must find its full name: 
            join the prefix property name, 
            like <c:link to="#title" />,
            with one of the properties of the type of the extension point,
            like <c:link to="pvc.options.marks.PanelExtensionPoint#fillStyle" />,
            with an "_" character in between,
            and obtain the name <tt>title_fillStyle</tt>.
        </c:documentation>
        
        <c:property name="title" type="pvc.options.marks.PanelExtensionPoint">
            <c:documentation>
                The extension point of the top panel of 
                the title panel of the <i>root</i> chart.
            </c:documentation>
        </c:property>
        
        <c:property name="titleLabel" type="pvc.options.marks.LabelExtensionPoint">
            <c:documentation>
                The extension point of the label that holds the title text itself,
                when the title panel belongs to the <i>root</i> chart.
            </c:documentation>
        </c:property>
        
        <c:property name="smallTitle" type="pvc.options.marks.PanelExtensionPoint">
            <c:documentation>
                The extension point of the main panel of a <i>small</i> chart.
            </c:documentation>
        </c:property>
        
        <c:property name="smallTitleLabel" type="pvc.options.marks.LabelExtensionPoint">
            <c:documentation>
                The extension point of the label that holds the title text itself,
                when the title panel belongs to a <i>small</i> chart.
            </c:documentation>
        </c:property>
    </c:complexType>

    <c:complexType name="LegendPanelExtensionPoints" space="pvc.options.ext">
        <c:documentation>
            The extension points of the legend panel.
            
            To use an extension point you must find its full name: 
            join the prefix property name, 
            like <c:link to="#legendArea" />,
            with one of the properties of the type of the extension point,
            like <c:link to="pvc.options.marks.PanelExtensionPoint#strokeStyle" />,
            with an "_" character in between,
            and obtain the name <tt>legendArea_strokeStyle</tt>.
        </c:documentation>
        
        <c:property name="legendArea" type="pvc.options.marks.PanelExtensionPoint">
            <c:documentation>
                The extension point of the top panel of the legend panel.
            </c:documentation>
        </c:property>
        
        <c:property name="legendPanel" type="pvc.options.marks.PanelExtensionPoint">
            <c:documentation>
                The extension point of legend item panels.
            </c:documentation>
        </c:property>
                
        <c:property name="legendLabel" type="pvc.options.marks.LabelExtensionPoint">
            <c:documentation>
                The extension point of the label of a legend item.
            </c:documentation>
        </c:property>
        
        <c:property name="legendDot" type="pvc.options.marks.DotExtensionPoint">
            <c:documentation>
                The extension point of the dot (the marker's shape) of a legend item.
            </c:documentation>
        </c:property>
        
        <c:property name="legendRule" type="pvc.options.marks.RuleExtensionPoint">
            <c:documentation>
                The extension point of the rule (the marker's line) of a legend item.
            </c:documentation>
        </c:property>
        
        <!--  Shouldn't this apply to "label" and "panel" EPs as well??
        <c:property name="legend2Dot" type="pvc.options.marks.DotExtensionPoint">
            <c:documentation>
                The extension point of the dot (the marker's shape) of 
                a legend item of the second group.
            </c:documentation>
        </c:property>
        
        <c:property name="legend2Rule" type="pvc.options.marks.RuleExtensionPoint">
            <c:documentation>
                The extension point of the rule (the marker's line) of a legend item
                of the second group.
            </c:documentation>
        </c:property>
        -->
    </c:complexType>
    
    <!-- COMPLEX TYPES - PROTOVIS EXTENSION POINTS -->
    <c:complexType name="MarkExtensionPoint" space="pvc.options.marks">
        <c:documentation>
            The base class of protovis extension points.
            
            See the associated protovis documentation at
            <c:link to="http://mbostock.github.com/protovis/jsdoc/symbols/pv.Mark.html" />.
        </c:documentation>
        <c:property name="visible" type="boolean">
            <c:documentation>
                Indicates if a mark is visible.
                
                When a mark is not visible, 
                all its other properties are not evaluated.
                
                When a mark is not visible, 
                its children are not evaluated.
                
                See the associated protovis documentation at
                <c:link to="http://mbostock.github.com/protovis/jsdoc/symbols/pv.Mark.html#visible" />.
            </c:documentation>
         </c:property>
         <c:property name="left" type="number">
            <c:documentation>
                Indicates the distance between 
                this mark's left side and 
                its parent's left side.
                
                See the associated protovis documentation at
                <c:link to="http://mbostock.github.com/protovis/jsdoc/symbols/pv.Mark.html#left" />.
            </c:documentation>
         </c:property>
         <c:property name="right" type="number">
            <c:documentation>
                Indicates the distance between 
                this mark's right side and 
                its parent's right side.
                
                See the associated protovis documentation at
                <c:link to="http://mbostock.github.com/protovis/jsdoc/symbols/pv.Mark.html#right" />.
            </c:documentation>
        </c:property>
        <c:property name="top" type="number">
            <c:documentation>
                Indicates the distance between 
                this mark's top side and 
                its parent's top side.
                
                See the associated protovis documentation at
                <c:link to="http://mbostock.github.com/protovis/jsdoc/symbols/pv.Mark.html#top" />.
            </c:documentation>
        </c:property>
        
        <c:property name="bottom" type="number">
            <c:documentation>
                Indicates the distance between 
                this mark's bottom side and 
                its parent's bottom side.
                
                See the associated protovis documentation at
                <c:link to="http://mbostock.github.com/protovis/jsdoc/symbols/pv.Mark.html#bottom" />.
            </c:documentation>
        </c:property>
        
        <c:property name="events" type="string">
            <c:documentation>
                The mouse events that the mark can receive.
                
                The possible values are: 
                <tt>'none'</tt>, <tt>'painted'</tt> and <tt>'all'</tt>.
                
                See the associated protovis documentation at
                <c:link to="http://mbostock.github.com/protovis/jsdoc/symbols/pv.Mark.html#events" />.
            </c:documentation>
        </c:property>
        
        <c:property name="cursor" type="string">
            <c:documentation>
                The mouse cursor to show when the mouse is over.
                The value is a CSS2 cursor: <c:link to="http://www.w3.org/TR/CSS2/ui.html#propdef-cursor" />.
                
                See the associated protovis documentation at
                <c:link to="http://mbostock.github.com/protovis/jsdoc/symbols/pv.Mark.html#cursor" />.
            </c:documentation>
        </c:property>
        
        <c:property name="add" type="function">
            <c:documentation>
                Use this extension point to add 
                a new protovis mark to another mark.
                
                If the extension point refers to a panel mark,
                the parent of the new mark will be that panel.
                Otherwise, its parent will
                be the parent panel of the mark of the extension point.
                
                <c:example>
                The following example shows how to add an image to 
                an axis tick:
                <pre>
                function yAxisTick(){
                    return new pv.Image()
                            .url('res/images/arrowYy.png')
                            .lineWidth(0)
                            .height(7)
                            .width(5);
                }
                </pre>
                </c:example>
            </c:documentation>
        </c:property>
    </c:complexType>
    
    <c:complexType name="BarExtensionPoint" space="pvc.options.marks" base="pvc.options.marks.MarkExtensionPoint">
         <c:documentation>
            The class of protovis Bar extension points.
            
            See the associated protovis documentation at
            <c:link to="http://mbostock.github.com/protovis/jsdoc/symbols/pv.Bar.html" />.
        </c:documentation>
        
        <c:property name="fillStyle" type="pvc.options.varia.ColorString">
            <c:documentation>
                The fill color of the bar.
                
                See the associated protovis documentation at
                <c:link to="http://mbostock.github.com/protovis/jsdoc/symbols/pv.Bar.html#fillStyle" />.
            </c:documentation>
        </c:property>
        
        <c:property name="strokeStyle" type="pvc.options.varia.ColorString">
            <c:documentation>
                The border stroke color of the bar. 
                
                See the associated protovis documentation at
                <c:link to="http://mbostock.github.com/protovis/jsdoc/symbols/pv.Bar.html#strokeStyle" />.
            </c:documentation>
        </c:property>
        
        <c:property name="lineWidth" type="number">
            <c:documentation>
                The width of the border of the bar. 
                
                See the associated protovis documentation at
                <c:link to="http://mbostock.github.com/protovis/jsdoc/symbols/pv.Bar.html#lineWidth" />.
            </c:documentation>
        </c:property>
        
        <c:property name="width" type="number">
            <c:documentation>
                The width of the bar. 
                
                See the associated protovis documentation at
                <c:link to="http://mbostock.github.com/protovis/jsdoc/symbols/pv.Bar.html#width" />.
            </c:documentation>
        </c:property>
        
        <c:property name="height" type="number">
            <c:documentation>
                The height of the bar. 
                
                See the associated protovis documentation at
                <c:link to="http://mbostock.github.com/protovis/jsdoc/symbols/pv.Bar.html#height" />.
            </c:documentation>
        </c:property>
    </c:complexType>
    
    <c:complexType name="PanelExtensionPoint" space="pvc.options.marks" base="pvc.options.marks.BarExtensionPoint">
         <c:documentation>
            The class of protovis Panel extension points.
            
            See the associated protovis documentation at
            <c:link to="http://mbostock.github.com/protovis/jsdoc/symbols/pv.Panel.html" />.
        </c:documentation>
        
        <c:property name="overflow" type="string">
            <c:documentation>
                Specifies if child marks are clipped if 
                they are laid outside of the panel's bounds.
                
                The most used values are <tt>'visible'</tt>, <tt>'hidden'</tt>.
                See all possible values in in <c:link to="http://www.w3.org/TR/CSS2/visufx.html#overflow" />.
                
                See the associated protovis documentation at
                <c:link to="http://mbostock.github.com/protovis/jsdoc/symbols/pv.Panel.html#overflow" />.
            </c:documentation>
        </c:property>
        <!--
        leaving transform out 
         -->
    </c:complexType>
    
    <c:complexType name="RuleExtensionPoint" space="pvc.options.marks" base="pvc.options.marks.MarkExtensionPoint">
         <c:documentation>
            The class of protovis Rule extension points.
            
            See the associated protovis documentation at
            <c:link to="http://mbostock.github.com/protovis/jsdoc/symbols/pv.Rule.html" />.
        </c:documentation>
        
        <c:property name="width" type="number">
            <c:documentation>
                The width of the rule, when it is horizontal.
                
                See the associated protovis documentation at
                <c:link to="http://mbostock.github.com/protovis/jsdoc/symbols/pv.Rule.html#width" />.
            </c:documentation>
        </c:property>
        
        <c:property name="height" type="number">
            <c:documentation>
                The height of the rule, when it is vertical. 
                
                See the associated protovis documentation at
                <c:link to="http://mbostock.github.com/protovis/jsdoc/symbols/pv.Rule.html#height" />.
            </c:documentation>
        </c:property>
        
        <c:property name="strokeStyle" type="pvc.options.varia.ColorString">
            <c:documentation>
                The stroke color of the rule. 
                
                See the associated protovis documentation at
                <c:link to="http://mbostock.github.com/protovis/jsdoc/symbols/pv.Rule.html#strokeStyle" />.
            </c:documentation>
        </c:property>
        
        <c:property name="lineWidth" type="number">
            <c:documentation>
                The line width of the rule.
                
                See the associated protovis documentation at
                <c:link to="http://mbostock.github.com/protovis/jsdoc/symbols/pv.Rule.html#lineWidth" />.
            </c:documentation>
        </c:property>
        
    </c:complexType>
    
    <c:complexType name="ColorString" space="pvc.options.varia" base="string">
        <c:documentation>
            This class is a documentation class and 
            really just documents the format of color strings.
            
            Colors can be specified as a string that follows one of the following formats:
            <ul>
                <li>
                    an RGB or HSL color, as defined in <c:link to="http://www.w3.org/TR/css3-color/" />:
                    <ul>
                        <li>
                            <tt>'#AE7'</tt>
                        </li>
                        <li>
                            <tt>'#A0E070'</tt>
                        </li>
                        <li>
                            <tt>rgb(255, 0, 0)</tt>
                        </li>
                        <li>
                            <tt>rgba(100%, 0, 0, 0.5)</tt>
                        </li>
                        <li>
                            <tt>hsl(100, 50%, 20%)</tt>
                        </li>
                        <li>
                            <tt>hsla(100, 50%, 20%, 0.5)</tt>
                        </li>
                    </ul>
                </li>
                <li>
                    an SVG named color, as defined in <c:link to="http://www.w3.org/TR/SVG/types.html#ColorKeywords" />:
                    <ul>
                        <li><tt>'aliceblue'</tt></li>
                        <li><tt>'aquamarine'</tt></li>
                    </ul>
                </li>
                <li>
                    a subset of the CSS3 gradients format,
                    as defined in <c:link to="http://www.w3.org/TR/css3-images/#gradients" />:
                    <ul>
                        <li><tt>'linear-gradient(90deg, green, blue)'</tt></li>
                        <li><tt>'linear-gradient(to bottom left, red, yellow 20%, green, blue)'</tt></li>
                        <li><tt>'linear-gradient(red, rgb(0,0,255))'</tt></li>
                        <li><tt>'radial-gradient(red, yellow 40%, red)'</tt></li>
                    </ul>
                </li>
                <li>
                    <tt>'transparent'</tt> for a transparent background
                </li>
            </ul>
            
            See the associated protovis documentation at
            <c:link to="http://mbostock.github.com/protovis/jsdoc/symbols/pv.html#.color" />.
        </c:documentation>
    </c:complexType>
    
    
    <!-- FUNCTION TYPES -->
    
    <c:functionType name="TooltipFormatter" space="pvc.options.varia">
        <c:documentation>
            The function type of a tooltip formatter.
            
            Whether the tooltip format is HTML or plain text must 
            be known by the formatter.
        </c:documentation>
        <c:argument name="this" type="pvc.visual.Context" required="true">
            <c:documentation>
                The CCC visual context object.
            </c:documentation>
        </c:argument>
        <c:argument name="scene" type="pvc.visual.Scene" required="true">
            <c:documentation>
                The scene whose tooltip is to be built.
                
                Use the data contained in the scene object to 
                build the tooltip.
            </c:documentation>
        </c:argument>
        <c:returns type="string">
            <c:documentation>
                The tooltip text.
            </c:documentation>
        </c:returns>
    </c:functionType> 
    
    <c:functionType name="StandardAction" space="pvc.options.varia">
        <c:documentation>
            A standard action function that is called 
            when a certain event happens on a visual element.
        </c:documentation>
        <c:argument name="this" type="pvc.visual.Context" required="true">
            <c:documentation>
                The CCC visual context object.
            </c:documentation>
        </c:argument>
        <c:argument name="scene" type="pvc.visual.Scene" required="true">
            <c:documentation>
                The scene associated with the visual item.
            </c:documentation>
        </c:argument>
    </c:functionType> 
    
    <c:functionType name="SelectionChangedAction" space="pvc.options.varia">
        <c:documentation>
            A callback function that is called
            when, after selection has changed,
            the chart is updated to reflect the change.
        </c:documentation>
        <c:argument name="this" type="pvc.visual.Context" required="true">
            <c:documentation>
                The CCC visual context object.
            </c:documentation>
        </c:argument>
        <c:argument name="selectedDatums" type="list(pvc.data.Datum)" required="true">
            <c:documentation>
                An array with the resulting selected datums.
            </c:documentation>
        </c:argument>
    </c:functionType> 
    
    <c:functionType name="UserSelectionAction" space="pvc.options.varia">
        <c:documentation>
            A callback function that is called
            when the user performs a selection,
            but before the corresponding datums' selected state is actually changed.
        </c:documentation>
        <c:argument name="this" type="pvc.visual.Context" required="true">
            <c:documentation>
                The CCC visual context object.
            </c:documentation>
        </c:argument>
        <c:argument name="selectingDatums" type="list(pvc.data.Datum)" required="true">
            <c:documentation>
                An array with the datums that will be selected by the current operation.
            </c:documentation>
        </c:argument>
        <c:returns type="list(pvc.data.Datum)">
            <c:documentation>
                The datums that should be actually selected.
            </c:documentation>
        </c:returns>
    </c:functionType> 
    
    <c:functionType name="DimensionsReader" space="pvc.options.varia">
        <c:documentation>
            A function that reads raw values from a virtual item array.
        </c:documentation>
        <c:argument name="this" type="pvc.data.Data" required="true">
            <c:documentation>
                The data instance into which atoms will be read.
            </c:documentation>
        </c:argument>
        <c:argument name="virtualItem" type="list(any)" required="true">
            <c:documentation>
                The virtual item array.
            </c:documentation>
        </c:argument>
        <c:argument name="outAtoms" type="object" required="true">
            <c:documentation>
                An object that should be filled with read raw values, 
                each placed in a property with the name
                of the corresponding dimension.
                
                It is also possible that the values be the atoms themselves, 
                a technique that can be used to achieve greater performance,
                when a dimension only has two or three possible values. 
            </c:documentation>
        </c:argument>
    </c:functionType> 
    
    <c:functionType name="NumberFormatter" space="pvc.options.varia">
        <c:documentation>
            A function that formats a non-null <i>numeric</i> value
            according to some predefined format.
        </c:documentation>
        <c:argument name="this" type="null" required="true">
            <c:documentation>
                The global JavaScript object.
            </c:documentation>
        </c:argument>
        <c:argument name="value" type="number!" required="true">
            <c:documentation>
                The non-null number to format.
            </c:documentation>
        </c:argument>
        <c:returns type="string!">
            <c:documentation>
                The number formatted as a non-empty string.
            </c:documentation>
        </c:returns>
    </c:functionType> 
    
    <c:functionType name="DimensionConverter" space="pvc.options.varia">
        <c:documentation>
            A function that converts a non-null raw value
            into a value of the dimension's 
            <c:link to="pvc.options.varia.DimensionTypeOptions#valueType" />
            or some value that 
            its cast function can convert from.
        </c:documentation>
        <c:argument name="this" type="null" required="true">
            <c:documentation>
                The global JavaScript object.
            </c:documentation>
        </c:argument>
        <c:argument name="sourceValue" type="any" required="true">
            <c:documentation>
                The non-null source value to convert.
                
                In the case where the raw value to convert is 
                a Google-table-like cell, 
                it is the value of its <tt>v</tt>
                property that is passed to this argument.
            </c:documentation>
        </c:argument>
        <c:returns type="any">
            <c:documentation>
                The converted value.
            </c:documentation>
        </c:returns>
    </c:functionType> 
    
    <c:functionType name="DimensionKey" space="pvc.options.varia">
        <c:documentation>
            A function that converts a non-null value of the dimension's 
            <c:link to="pvc.options.varia.DimensionTypeOptions#valueType" />
            into a string that (uniquely) identifies
            the value in the dimension.
        </c:documentation>
        <c:argument name="this" type="null" required="true">
            <c:documentation>
                The global JavaScript object.
            </c:documentation>
        </c:argument>
        <c:argument name="value" type="any" required="true">
            <c:documentation>
                The non-null value to convert.
            </c:documentation>
        </c:argument>
        <c:returns type="string">
            <c:documentation>
                The corresponding key.
            </c:documentation>
        </c:returns>
    </c:functionType> 
    
    <c:functionType name="DimensionComparer" space="pvc.options.varia">
        <c:documentation>
            A function that compares two different and non-null values of 
            the dimension's <c:link to="pvc.options.varia.DimensionTypeOptions#valueType" />.
        </c:documentation>
        <c:argument name="this" type="null" required="true">
            <c:documentation>
                The global JavaScript object.
            </c:documentation>
        </c:argument>
        <c:argument name="a" type="any" required="true">
            <c:documentation>
                The first value to compare.
            </c:documentation>
        </c:argument>
        <c:argument name="b" type="any" required="true">
            <c:documentation>
                The second value to compare.
            </c:documentation>
        </c:argument>
        <c:returns type="number">
            <c:documentation>
                The number 0 if the two values have the same order, 
                a negative number if <c:link to="a" /> is before <c:link to="b" />, and
                a positive number if <c:link to="a" /> is after <c:link to="b" />.
            </c:documentation>
        </c:returns>
    </c:functionType> 
    
    <c:functionType name="DimensionFormatter" space="pvc.options.varia">
        <c:documentation>
            A function that formats a value, possibly null, of 
            the dimension's <c:link to="pvc.options.varia.DimensionTypeOptions#valueType" />.
        </c:documentation>
        <c:argument name="this" type="null" required="true">
            <c:documentation>
                The global JavaScript object.
            </c:documentation>
        </c:argument>
        <c:argument name="value" type="any" required="true">
            <c:documentation>
                The value to format.
            </c:documentation>
        </c:argument>
        <c:argument name="sourceValue" type="any">
            <c:documentation>
                The raw value, 
                when the value was read from a data source,
                or <tt>undefined</tt>, otherwise.
                
                In the case where the raw value is 
                a Google-table-like cell, 
                it is the value of its <tt>v</tt>
                property that is passed to this argument.
            </c:documentation>
        </c:argument>
        <c:returns type="string">
            <c:documentation>
                The string that is the formatted value.
                Only the <tt>null</tt> value can have the empty string
                as the formatted value.
            </c:documentation>
        </c:returns>
    </c:functionType>
    
    <!-- ATOM TYPES -->
    <c:atomType name="LegendClickMode" space="pvc.options.varia" base="string">
        <c:documentation>
            Control the beahvior of the legend
            when the user clicks a legend item.
        </c:documentation>
        
        <c:atom name="None" value="'none'">
            <c:documentation>
                Nothing happens.
            </c:documentation>
        </c:atom>
        
        <c:atom name="ToggleSelected" value="'toggleSelected'">
            <c:documentation>
                The corresponding datums' selected state is toggled. 
            </c:documentation>
        </c:atom>
        
        <c:atom name="ToggleVisible" value="'toggleVisible'">
            <c:documentation>
                The corresponding datums' visible state is toggled.
            </c:documentation>
        </c:atom>
        
    </c:atomType>
    
    <c:atomType name="AlignmentSource" space="pvc.options.varia" base="string">
        <c:documentation>
            The sides of a child panel, the source, 
            that can be aligned with 
            a target side of a parent panel.
            
            The alignment side must be 
            orthogonal to the side of 
            the <c:link to="pvc.options.varia.DockPosition" />.
            
            By combininig the alignment source
            with the <c:link to="pvc.options.varia.AlignmentTarget"/>,
            different alignment combinations can be achieved.
            
            The alignment target side must be 
            parallel to the side of source alignment.
        </c:documentation>
        
        <c:atom name="Left" value="'left'">
            <c:documentation>
                The left side of the child panel 
                is placed at the same position as the
                target side of the parent panel.
            </c:documentation>
        </c:atom>
        
        <c:atom name="Center" value="'center'">
            <c:documentation>
                The horizontal center position of the child panel 
                is placed at the same position as the
                target side of the parent panel. 
            </c:documentation>
        </c:atom>
        
        <c:atom name="Right" value="'right'">
            <c:documentation>
                The right side of the child panel 
                is placed at the same position as the
                target side of the parent panel.
            </c:documentation>
        </c:atom>
        
        <c:atom name="Top" value="'top'">
            <c:documentation>
                The top side of the child panel 
                is placed at the same position as the
                target side of the parent panel.
            </c:documentation>
        </c:atom>
        
        <c:atom name="Middle" value="'middle'">
            <c:documentation>
                The vertical center position of the child panel 
                is placed at the same position as the
                target side of the parent panel. 
            </c:documentation>
        </c:atom>
        
        <c:atom name="Bottom" value="'bottom'">
            <c:documentation>
                The bottom side of the child panel 
                is placed at the same position as the
                target side of the parent panel. 
            </c:documentation>
        </c:atom>
    </c:atomType>
    
    <c:atomType name="AlignmentTarget" space="pvc.options.varia" base="string">
        <c:documentation>
            The sides of a parent panel, the target, 
            with which the alignment side of a source child panel 
            can be aligned to.
            
            The alignment target side must be 
            parallel to the side of source alignment.
            
            Wherever an alignment target argument is found,
            a value of type <tt>number</tt>,
            a numeric <tt>string</tt> or 
            a numeric percentage <tt>string</tt>, 
            may also be specified.
            
            In this case, 
            these specify the position of alignment, 
            from the left or top sides,
            whichever is parallel to the alignment source side.
            
            For example, if the source alignment side is <tt>'right'</tt>
            and the target alignment specifies <tt>'10%'</tt>,
            then the right side of the child panel would be
            placed at a position of 
            10% of the parent panel's client width
            from the parent's left side.
        </c:documentation>
        
        <c:atom name="Left" value="'left'">
            <c:documentation>
                The source side of the child panel
                is placed at the same position as the
                left side of the parent panel.
            </c:documentation>
        </c:atom>
        
        <c:atom name="Center" value="'center'">
            <c:documentation>
                The source side of the child panel
                is placed at the same position as the
                horizontal center position of the parent panel.
            </c:documentation>
        </c:atom>
        
        <c:atom name="Right" value="'right'">
            <c:documentation>
                The source side of the child panel
                is placed at the same position as the
                right side of the parent panel.
            </c:documentation>
        </c:atom>
        
        <c:atom name="Top" value="'top'">
            <c:documentation>
                The source side of the child panel
                is placed at the same position as the
                top side of the parent panel.
            </c:documentation>
        </c:atom>
        
        <c:atom name="Middle" value="'middle'">
            <c:documentation>
                The source side of the child panel
                is placed at the same position as the
                vertical center position of the parent panel.
            </c:documentation>
        </c:atom>
        
        <c:atom name="PageMiddle" value="'page-middle'">
            <c:documentation>
                The source side of the child panel
                is placed at the same position as the
                vertical center position of the 
                <i>page</i> height of the parent panel.
                
                The page height differs from the chart height
                in that the 
                page height is by definition 
                the value initially specified in 
                <c:link to="pvc.options.ChartCommonOptions#height" />,
                and the chart height 
                can grow if layout so requires it,
                like it does in <i>small multiples</i> charts.
                
                The page middle alignment allows, 
                for example, 
                placing the legend panel in 
                the middle of the screen height,
                even though the height of the chart
                may have become much larger.
            </c:documentation>
        </c:atom>
        
        <c:atom name="Bottom" value="'bottom'">
            <c:documentation>
                The source side of the child panel
                is placed at the same position as the
                bottom side of the parent panel.
            </c:documentation>
        </c:atom>
    </c:atomType>
    
    <c:atomType name="DockPosition" space="pvc.options.varia" base="string">
        <c:documentation>
            The sides of a parent panel to 
            which a child panel may be docked to.
        </c:documentation>
        
        <c:atom name="Left" value="'left'">
            <c:documentation>
                The left side of the child panel 
                is placed at the same position as the
                left side of the parent panel. 
            </c:documentation>
        </c:atom>
        
        <c:atom name="Right" value="'right'">
            <c:documentation>
                The right side of the child panel 
                is placed at the same position as the
                right side of the parent panel. 
            </c:documentation>
        </c:atom>
        
        <c:atom name="Top" value="'top'">
            <c:documentation>
                The top side of the child panel 
                is placed at the same position as the
                top side of the parent panel. 
            </c:documentation>
        </c:atom>
        
        <c:atom name="Bottom" value="'bottom'">
            <c:documentation>
                The bottom side of the child panel 
                is placed at the same position as the
                bottom side of the parent panel. 
            </c:documentation>
        </c:atom>
    </c:atomType>
    
    <c:atomType name="ClearSelectionMode" space="pvc.options.varia" base="string">
        <c:documentation>
            Controls if and how the selection can be cleared by the user.
        </c:documentation>
        
        <c:atom name="Manual" value="'manual'">
            <c:documentation>
                The user has no way to explicitly fully clear the selection.
                
                It is still possible to clear the selection,
                if the selection behavior performs a toggling operation.
                
                Selection can always be cleared by code.
            </c:documentation>
        </c:atom>
        
        <c:atom name="EmptySpaceClick" value="'emptySpaceClick'">
            <c:documentation>
                The user can click on any <i>empty area</i>
                <i>inside</i> the chart to clear the selection.
            </c:documentation>
        </c:atom>
    </c:atomType>
    
    <c:atomType name="Orientation" space="pvc.options.varia" base="string">
        <c:documentation>
            The main direction of drawing.
        </c:documentation>
        
        <c:atom name="Vertical" value="'vertical'">
            <c:documentation>
                Vertical direction.
            </c:documentation>
        </c:atom>
        
        <c:atom name="Horizontal" value="'horizontal'">
            <c:documentation>
                Horizontal direction.
            </c:documentation>
        </c:atom>
    </c:atomType>
    
    <c:atomType name="ShapeType" space="pvc.options.varia" base="string">
        <c:documentation>
            The shapes that are available in protovis Dot marks.
        </c:documentation>
        
        <c:atom name="Circle"   value="'circle'" />
        <c:atom name="Square"   value="'square'" />
        <c:atom name="Triangle" value="'triangle'" />
        <c:atom name="Diamond"  value="'diamond'" />
        <c:atom name="Cross"    value="'cross'" />
        <c:atom name="Tick"     value="'tick'" />
        <c:atom name="Bar"      value="'bar'" />
    </c:atomType>
    
    <c:atomType name="DimensionValueType" space="pvc.options.varia" base="function">
        <c:documentation>
            The types of values that a dimension can hold.
            
            Note that, 
            whatever the value type of a dimension type,
            <tt>null</tt> is always a supported value.
        </c:documentation>
        
        <c:atom name="Any" value="null">
            <c:documentation>
                The "any" value type, 
                specified as <tt>null</tt>, 
                means that a dimension can hold any type of data.
                
                Values of this type are <i>not</i> cast.
                
                Each value may have a different type.
                
                Dimension types of this value type
                are discrete.
            </c:documentation>
        </c:atom>
        <c:atom name="Boolean" value="Boolean">
            <c:documentation>
                The dimension holds <i>boolean</i> values.
                
                Values of this type are cast by using the standard 
                JavaScript <tt>Boolean</tt> function.
                
                Dimension types of this value type
                are discrete.
            </c:documentation>
        </c:atom>
        <c:atom name="Number" value="Number">
            <c:documentation>
                The dimension holds <i>number</i> values.
                
                Values of this type are cast by using the standard 
                JavaScript <tt>Number</tt> function;
                additionally, 
                resulting <tt>NaN</tt> values 
                are converted to <tt>null</tt>. 
                
                Dimension types of this value type
                can be continuous or discrete.
            </c:documentation>
        </c:atom>
        <c:atom name="Date" value="Date">
            <c:documentation>
                The dimension holds <i>date</i> values.
                
                Values of this type are cast by using the standard 
                JavaScript <tt>Date</tt> constructor.
                
                Dimension types of this value type
                can be continuous or discrete.
            </c:documentation>
        </c:atom>
        <c:atom name="String" value="String">
            <c:documentation>
                The dimension holds <i>string</i> values.
                
                Values of this type are cast by using the standard 
                JavaScript <tt>String</tt> function.
                
                Dimension types of this value type
                are discrete.
                
                The empty string value is 
                always converted to the null value.
            </c:documentation>
        </c:atom>
        <c:atom name="Object" value="Object">
            <c:documentation>
                The dimension holds <i>object</i> values.
                
                Values of this type are cast by using the standard 
                JavaScript <tt>Object</tt> function.
                
                Dimension types of this value type
                are discrete.
            </c:documentation>
        </c:atom>
    </c:atomType>
</c:model>